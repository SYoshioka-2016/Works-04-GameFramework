//==================================================================================================================================
// インクルード
//==================================================================================================================================

#ifndef _INCLUDE_GUARD_GAME_H_
#include "Game.h"
#endif	// #ifndef _INCLUDE_GUARD_GAME_H_

#ifndef _INCLUDE_GUARD_SCENEMANAGER_H_
#include "../../Scene/Manager/SceneManager.h"
#endif	// #ifndef _INCLUDE_GUARD_SCENEMANAGER_H_

#ifndef _INCLUDE_GUARD_TITLESCENE_H_
#include "../../Scene/Scenes/01_Title/TitleScene.h"
#endif	// #ifndef _INCLUDE_GUARD_TITLESCENE_H_

#ifndef _INCLUDE_GUARD_FPS_H_
#include "../../Time/FPS/Fps.h"
#endif	// #ifndef _INCLUDE_GUARD_FPS_H_

#ifndef _INCLUDE_GUARD_OPENGLGRAPHICLIB_H_
#include <OpenGLGraphicLib.h>
#endif	// #ifndef _INCLUDE_GUARD_OPENGLGRAPHICLIB_H_

#ifndef _INCLUDE_GUARD_OPENALSOUNDLIB_H_
#include <OpenALSoundLib.h>
#endif	// #ifndef _INCLUDE_GUARD_OPENALSOUNDLIB_H_



//==================================================================================================================================
// usingディレクティブ
//==================================================================================================================================

// ゲーム名前空間
using namespace NS_OpenGLWindowPCGame;



//==================================================================================================================================
// 関数定義
//==================================================================================================================================

//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : コンストラクタ
//
// @note : 
//
//----------------------------------------------------------------------------------------------------------------------------------
Game::Game()
{
	// OpenALの初期化
	NS_Sound::InitializeOpenAL();



	// FPSを設定する
	Fps::Instance()->SetFixedFPS( 60 );
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : デストラクタ
//
// @note : 
//
//----------------------------------------------------------------------------------------------------------------------------------
Game::~Game() 
{

}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 初期化処理
//
// @note : 
//
// ゲームの初期化処理。
// ゲームが開始する際に1回だけ行なわれる。
//----------------------------------------------------------------------------------------------------------------------------------
void Game::Initialize() 
{ 
	// 最初のシーンの切り替え
	SceneManager::Instance()->ChangeNextScene( new TitleScene );






	// ビューポートを設定
	glViewport( 0, 0, BaseApplication::GetWindowWidth(), BaseApplication::GetWindowHeight() );


}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 更新処理
//
// @note : 
//
// ゲームの更新処理。
// ゲーム中に描画処理の前に繰り返し行なわれる。
//----------------------------------------------------------------------------------------------------------------------------------
void Game::Update() 
{ 
	// FPSの測定
	Fps::Instance()->MeasureFPS();

	// 待機処理
	Fps::Instance()->Wait();



	// FPSが安定するまで待機する

	// フレームカウンタ
	static int	iFrameCount		= 0;

	// フレームカウンタの最大値
	const int	iMaxFrameCount	= 1000;

	// FPSが安定したらフレームカウンタを最大値に設定する
	if ( Fps::Instance()->IsStableFPS( 5 ) ) 
	{
		iFrameCount = iMaxFrameCount;
	}

	// フレームカウンタが最大値未満ならフレームをカウントする
	if ( iFrameCount < iMaxFrameCount ) 
	{
		iFrameCount++;

		// フレームカウンタが最大になるまで処理を行わない
		return;
	}



	// シーン管理クラスの実行処理
	SceneManager::Instance()->Run();
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 描画処理
//
// @note : 
//
// ゲームの描画処理。
// ゲーム中に更新処理の後に繰り返し行なわれる。
//----------------------------------------------------------------------------------------------------------------------------------
void Game::Display() 
{
glClear( GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT );


	// シーン管理クラスの描画処理
	SceneManager::Instance()->Draw();
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 終了処理
//
// @note : 
//
// ゲームの終了処理。
// ゲームが終了する際に1回だけ行なわれる。
//----------------------------------------------------------------------------------------------------------------------------------
void Game::Finish() 
{ 
	
}