//==================================================================================================================================
// インクルード
//==================================================================================================================================

#ifndef _INCLUDE_GUARD_FPS_H_
#include "Fps.h"
#endif	// #ifndef _INCLUDE_GUARD_FPS_H_



//==================================================================================================================================
// usingディレクティブ
//==================================================================================================================================

// ゲーム名前空間
using namespace NS_OpenGLWindowPCGame;



//==================================================================================================================================
// 関数定義
//==================================================================================================================================

//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : コンストラクタ
//
// @note : 
//
//----------------------------------------------------------------------------------------------------------------------------------
Fps::Fps() :
	m_ulStartTime( 0 ),
	m_uiFrameCount( 0 ),
	m_fCurrentFps( 0 ),
	m_uiFixedFPS( 60 ),
	m_uiSamplingCount( 60 )
{

}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : デストラクタ
//
// @note : 
//
//----------------------------------------------------------------------------------------------------------------------------------
Fps::~Fps() 
{
	
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : FPSの測定
//
// @note : 
//
// 現在のFPSを測定する。
// 設定されたサンプル数によって平均のFPS値を測る。
//----------------------------------------------------------------------------------------------------------------------------------
void Fps::MeasureFPS()
{
	// 1フレーム目なら測定開始時間を保存
	if ( m_uiFrameCount == 0 )
	{
		m_ulStartTime = timeGetTime();
	}



	// フレームカウンタがサンプル数まで達したら平均のFPSを計算する
	if ( m_uiFrameCount == GetSamplingCount() )
	{
		// 現在の時間を取得
		unsigned long ulTime	= timeGetTime();

		// 現在のFPSを設定
		m_fCurrentFps			= 1000.0f / ( ( ulTime - m_ulStartTime ) / GetSamplingCount() );
		
		// フレームカウンタを初期化
		m_uiFrameCount			= 0;
		
		// 測定開始時間を初期化
		m_ulStartTime			= ulTime;
	}

	// フレームをカウント
	m_uiFrameCount++;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 待機処理
//
// @note : 
//
// 固定されたFPSに合わせて待機処理を行う。
//----------------------------------------------------------------------------------------------------------------------------------
void Fps::Wait()
{
	// 経過した時間
	unsigned long	ulElapsedTime	= timeGetTime() - m_ulStartTime;

	// 待機する時間
	long			lSleepTime		= ( m_uiFrameCount * 1000 / GetFixedFPS() ) - ulElapsedTime;
	
	// 待機処理
	if ( lSleepTime > 0 )
	{
		Sleep( lSleepTime );
	}
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : FPSが安定しているか?
//
// @param [in] / const float fTolerance : FPSの誤差の許容範囲
//
// @return / bool :  FPSが安定しているか?( true : 安定している | false : 安定していない )
//
// @note : 
//
// FPSが安定しているか調べる。
// 固定するFPSと現在のFPSの誤差が、指定の許容範囲内なら安定しているとする。
//----------------------------------------------------------------------------------------------------------------------------------
bool Fps::IsStableFPS( const float fTolerance ) const 
{
	return ( abs( GetFixedFPS() - GetFPS() ) <= fTolerance );
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 現在のFPSの取得
//
// @return / unsigned int : 現在のFPS
//
// @note : 
//
// 現在のFPSを返す。
//----------------------------------------------------------------------------------------------------------------------------------
float Fps::GetFPS() const 
{
	return m_fCurrentFps;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 現在のSPFの取得
//
// @return / unsigned int : 現在のSPF
//
// @note : 
//
// 現在のSPFを返す。
//----------------------------------------------------------------------------------------------------------------------------------
float Fps::GetSPF() const 
{
	return 1.0f / ( ( m_fCurrentFps != 0.0f ) ? m_fCurrentFps : GetFixedFPS() );
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 固定するFPSの取得
//
// @return / unsigned int : 固定するFPS
//
// @note : 
//
// 固定するFPSを返す。
//----------------------------------------------------------------------------------------------------------------------------------
unsigned int Fps::GetFixedFPS() const 
{
	return m_uiFixedFPS;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 固定するFPSの設定
//
// @param [in] / const unsigned int uiFPS : 固定するFPS
//
// @note : 
//
// 固定するFPSを設定する。
//----------------------------------------------------------------------------------------------------------------------------------
void Fps::SetFixedFPS( const unsigned int uiFPS ) 
{
	m_uiFixedFPS = uiFPS;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 平均を取るサンプル数の取得
//
// @return / unsigned int : 平均を取るサンプル数
//
// @note : 
//
// 平均を取るサンプル数を返す。
//----------------------------------------------------------------------------------------------------------------------------------
unsigned int Fps::GetSamplingCount() const 
{
	return m_uiSamplingCount;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 平均を取るサンプル数の設定
//
// @param [in] / const unsigned int uiSamplingCount : 平均を取るサンプル数
//
// @note : 
//
// 平均を取るサンプル数を設定する。
//----------------------------------------------------------------------------------------------------------------------------------
void Fps::SetSamplingCount( const unsigned int uiSamplingCount )
{
	m_uiSamplingCount = uiSamplingCount;
}