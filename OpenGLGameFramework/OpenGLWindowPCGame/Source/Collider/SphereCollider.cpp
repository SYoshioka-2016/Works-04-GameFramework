//==================================================================================================================================
// インクルード
//==================================================================================================================================

#ifndef _INCLUDE_GUARD_SPHERECOLLIDER_H_
#include "SphereCollider.h"
#endif	// #ifndef _INCLUDE_GUARD_SPHERECOLLIDER_H_

#ifndef _INCLUDE_GUARD_OPENGLGRAPHICLIB_H_
#include <OpenGLGraphicLib.h>
#endif	// #ifndef _INCLUDE_GUARD_OPENGLGRAPHICLIB_H_



//==================================================================================================================================
// usingディレクティブ
//==================================================================================================================================

// ゲーム名前空間
using namespace NS_OpenGLWindowPCGame;



//==================================================================================================================================
// 関数定義
//==================================================================================================================================

//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : コンストラクタ
//
// @param [in] / const Transform& transform : トランスフォームの参照
//
// @note : 
//
//----------------------------------------------------------------------------------------------------------------------------------
SphereCollider::SphereCollider( const Transform& transform ) :
	m_vec3Center( 0, 0, 0 ),
	m_fRadius( 0 ),
	m_Transform( transform )
{ 
	
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : デストラクタ
//
// @note : 
//
//----------------------------------------------------------------------------------------------------------------------------------
SphereCollider::~SphereCollider() 
{

}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 衝突判定
//
// @param [in] / const SphereCollider& sphereCollider : スフィアコライダの参照
//
// @return / bool : 衝突したか?( true : 衝突した | false : 衝突してない )
//
// @note : 
//
// スフィアコライダ同士の衝突判定を行い、結果を返す。
//----------------------------------------------------------------------------------------------------------------------------------
bool SphereCollider::CollisionDetection( const SphereCollider& sphereCollider ) 
{
	return ( GetTranslatedCenter() - sphereCollider.GetTranslatedCenter() ).Length() <= ( GetRadius() + sphereCollider.GetRadius() );
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 中心位置の取得
//
// @return / const Vector3DF& : 中心位置
//
// @note : 
//
// 中心位置を返す。
//----------------------------------------------------------------------------------------------------------------------------------
const Vector3DF& SphereCollider::GetCenter() const 
{
	return m_vec3Center;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 半径の取得
//
// @return / const float : 半径
//
// @note : 
//
// 半径を返す。
//----------------------------------------------------------------------------------------------------------------------------------
const float SphereCollider::GetRadius() const
{
	return Clamp( m_fRadius, 0, abs( m_fRadius ) );
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 平行移動した中心位置の取得
//
// @return / Vector3DF : 平行移動した中心位置
//
// @note : 
//
// トランスフォームによって平行移動した中心位置を返す。
//----------------------------------------------------------------------------------------------------------------------------------
Vector3DF SphereCollider::GetTranslatedCenter() const 
{
	return m_vec3Center + m_Transform.position;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 中心位置の設定
//
// @param [in] / const Vector3DF& vec3Center : 中心位置
//
// @note : 
//
// 中心位置を設定する。
//----------------------------------------------------------------------------------------------------------------------------------
void SphereCollider::SetCenter( const Vector3DF& vec3Center )
{
	m_vec3Center = vec3Center;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 半径の設定
//
// @param [in] / const float fRadius : 半径
//
// @note : 
//
// 半径を設定する。
//----------------------------------------------------------------------------------------------------------------------------------
void SphereCollider::SetRadius( const float fRadius )
{
	m_fRadius = Clamp( fRadius, 0, abs( fRadius ) );
}