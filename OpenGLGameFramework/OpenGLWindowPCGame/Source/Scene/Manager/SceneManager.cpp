//==================================================================================================================================
// インクルード
//==================================================================================================================================
#ifndef _INCLUDE_GUARD_SCENEMANAGER_H_
#include "SceneManager.h"
#endif	// #ifndef _INCLUDE_GUARD_SCENEMANAGER_H_

#ifndef _INCLUDE_GUARD_BASESCENE_H_
#include "../Scenes/Base/BaseScene.h"
#endif	// #ifndef _INCLUDE_GUARD_BASESCENE_H_



//==================================================================================================================================
// usingディレクティブ
//==================================================================================================================================

// ゲーム名前空間
using namespace NS_OpenGLWindowPCGame;



//==================================================================================================================================
// 関数定義
//==================================================================================================================================

//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : コンストラクタ
//
// @note : 
//
//----------------------------------------------------------------------------------------------------------------------------------
SceneManager::SceneManager() :
	m_pCurrentScene( nullptr ),
	m_pNextScene( nullptr )
{ 

}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : デストラクタ
//
// @note : 
//
//----------------------------------------------------------------------------------------------------------------------------------
SceneManager::~SceneManager() 
{
	// 現在のシーンが有れば破棄する
	if ( POINTER_CHECK( m_pCurrentScene ) ) 
	{
		m_pCurrentScene->Finish();

		m_pCurrentScene->UnloadContent();

		SAFE_DELETE( m_pCurrentScene );
	}
/*
	// 次に遷移するシーンが有れば破棄する
	if ( POINTER_CHECK( m_pNextScene ) ) 
	{
		m_pNextScene->Finish();

		SAFE_DELETE( m_pNextScene );
	}
*/
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 実行処理
//
// @note : 
//
// 現在のシーンの更新処理を行う。
// 現在のシーンが終了したら次に遷移するシーンに切り替える。
//----------------------------------------------------------------------------------------------------------------------------------
void SceneManager::Run() 
{
	// 現在のシーンが有る場合
	if ( POINTER_CHECK( m_pCurrentScene ) ) 
	{
		// 現在のシーンが終了していればシーン切り替え
		if ( m_pCurrentScene->isEndScene() ) 
		{
			// 現在のシーンの終了処理
			m_pCurrentScene->Finish();

			// 現在のシーンのコンテンツアンロード
			m_pCurrentScene->UnloadContent();

			// 次に遷移するシーンの切り替え
			ChangeNextScene( m_pCurrentScene->GetNextScene() );

			// 現在のシーンを削除
			SAFE_DELETE( m_pCurrentScene );
		}
		// 現在のシーンが継続していればシーンを更新
		else 
		{
			// 現在のシーンの更新処理
			m_pCurrentScene->Update();
		}
	}

	// 現在のシーンが無い場合
	else 
	{
		// 次に遷移するシーンが有る場合
		if ( POINTER_CHECK( m_pNextScene ) ) 
		{ 
			// 現在のシーンを設定
			m_pCurrentScene = m_pNextScene;

			// 現在のシーンのコンテンツロード
			m_pCurrentScene->LoadContent();

			// 現在のシーンの初期化処理
			m_pCurrentScene->Initialize();

			// 次に遷移するシーンをクリア
			m_pNextScene = nullptr;
		}
	}
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 描画処理
//
// @note : 
//
// 現在のシーンの描画処理を行う。
//----------------------------------------------------------------------------------------------------------------------------------
void  SceneManager::Draw() 
{
	// 現在のシーンが無ければ処理しない
	if ( !POINTER_CHECK( m_pCurrentScene ) ) { return; }



	// シーンの描画処理
	m_pCurrentScene->Draw();
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 次に遷移するシーンの切り替え
//
// @param [in] / BaseScene* pScene : 次に遷移するシーン
//
// @note : 
//
// 次に遷移するシーンを切り替える。
// 実際にシーンを切り替える処理はRun関数で行う。
//----------------------------------------------------------------------------------------------------------------------------------
void  SceneManager::ChangeNextScene( BaseScene* pScene )
{
	// ポインタチェック
	ASSERT_POINTER_CHECK( pScene );



	// 次に遷移するシーンが有れば削除しておく
	if ( POINTER_CHECK( m_pNextScene ) ) 
	{
		m_pNextScene->Finish();

		m_pNextScene->UnloadContent();

		SAFE_DELETE( m_pNextScene );
	}



	// 次に遷移するシーンを設定
	m_pNextScene = pScene;
}