//==================================================================================================================================
// インクルード
//==================================================================================================================================

#ifndef _INCLUDE_GUARD_CAMERA_H_
#include "Camera.h"
#endif	// #ifndef _INCLUDE_GUARD_CAMERA_H_

#ifndef _INCLUDE_GUARD_OPENGLGRAPHICLIB_H_
#include <OpenGLGraphicLib.h>
#endif	// #ifndef _INCLUDE_GUARD_OPENGLGRAPHICLIB_H_



//==================================================================================================================================
// usingディレクティブ
//==================================================================================================================================

// ゲーム名前空間
using namespace NS_OpenGLWindowPCGame;



//==================================================================================================================================
// 関数定義
//==================================================================================================================================

//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : コンストラクタ
//
// @note : 
//
//----------------------------------------------------------------------------------------------------------------------------------
Camera::Camera() : Camera( CAMERA_DESC() )
{ 

}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : コンストラクタ
//
// @param [in] / const CAMERA_DESC&	desc : カメラ記述子
//
// @note : 
//
//----------------------------------------------------------------------------------------------------------------------------------
Camera::Camera( const CAMERA_DESC& desc ) :
	m_Desc( desc ),
	m_bStartedFlg( false ),
	m_ViewportBuffer( VIEWPORT_DESC() ),
	m_mat4ProjectionMatrixBuffer( MATRIX4X4F_IDENTITY ),
	m_mat4ModelViewMatrixBuffer( MATRIX4X4F_IDENTITY )
{

}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : デストラクタ
//
// @note : 
//
//----------------------------------------------------------------------------------------------------------------------------------
Camera::~Camera() 
{

}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 撮影開始
//
// @note : 
//
// 描画関連の設定処理を行う。
// カメラのデータを用いてカラーのクリア、ビューポート、行列の設定などを行う。
//----------------------------------------------------------------------------------------------------------------------------------
void Camera::Start() 
{
	// 画面をクリアする
	glClearColor( m_Desc.clearColor.r, m_Desc.clearColor.g, m_Desc.clearColor.b, m_Desc.clearColor.a );



	// 現在のビューポートを保存する
	glGetIntegerv( GL_VIEWPORT, (GLint*)&m_ViewportBuffer );

	// ビューポートを設定
	glViewport( m_Desc.viewport.x, m_Desc.viewport.y, m_Desc.viewport.width, m_Desc.viewport.height );



	// 行列モードをプロジェクションに選択する
	glMatrixMode( GL_PROJECTION );

	// 撮影開始フラグが降りていれば行列の保存を行う
	if ( !m_bStartedFlg )
	{
		// 現在のプロジェクション行列を保存する
		glGetFloatv( GL_PROJECTION_MATRIX, (GLfloat*)&m_mat4ProjectionMatrixBuffer );
	}

glLoadIdentity();

	// プロジェクション行列を設定
	glLoadMatrixf( (GLfloat*)&GetProjectionMatrix() );


	
	// 行列モードをモデルビューに選択する
	glMatrixMode( GL_MODELVIEW );
	
	// 撮影開始フラグが降りていれば行列の保存を行う
	if ( !m_bStartedFlg )
	{	
		// 現在のモデルビュー行列を保存する
		glGetFloatv( GL_MODELVIEW_MATRIX, (GLfloat*)&m_mat4ModelViewMatrixBuffer );
	}

glLoadIdentity();
	
	// モデルビュー行列を設定
	glLoadMatrixf( (GLfloat*)&GetViewMatrix() );



	// 撮影開始フラグを立てる
	m_bStartedFlg = true;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 撮影終了
//
// @note : 
//
// 撮影開始で行った設定を元に戻す。
//----------------------------------------------------------------------------------------------------------------------------------
void Camera::End() 
{
	// 撮影開始フラグが立っていなければ処理しない
	if ( !m_bStartedFlg ) { return; }



	// ビューポートを元に戻す
	glViewport( m_ViewportBuffer.x, m_ViewportBuffer.y, m_ViewportBuffer.width, m_ViewportBuffer.height );


	
	// 行列モードをプロジェクションに選択する
	glMatrixMode( GL_PROJECTION );

	glLoadIdentity();
	
	// プロジェクション行列を元に戻す
	glLoadMatrixf( (GLfloat*)&m_mat4ProjectionMatrixBuffer );


	
	// 行列モードをモデルビューに選択する
	glMatrixMode( GL_MODELVIEW );

	glLoadIdentity();
	
	// モデルビュー行列を元に戻す
	glLoadMatrixf( (GLfloat*)&m_mat4ModelViewMatrixBuffer );


	
	// 撮影開始フラグをおろす
	m_bStartedFlg = false;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 透視投影モードに変更
//
// @note : 
//
// 透視投影モードに切り替える。
//----------------------------------------------------------------------------------------------------------------------------------
void Camera::ChangeToPerspectiveGraphicMode() 
{
	m_Desc.isOrthoGraphic = false;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 平行投影モードに変更
//
// @note : 
//
// 平行投影モードに切り替える。
//----------------------------------------------------------------------------------------------------------------------------------
void Camera::ChangeToOrthoGraphicMode() 
{
	m_Desc.isOrthoGraphic = true;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 射影変換行列の取得
//
// @return / Matrix4x4F : 射影変換行列
//
// @note : 
//
// 射影変換行列を返す。
// 平行投影モードの場合は平行投影変換行列を、
// 透視投影モードの場合は透視投影変換行列を返す。
//----------------------------------------------------------------------------------------------------------------------------------
Matrix4x4F Camera::GetProjectionMatrix() 
{
	return ( m_Desc.isOrthoGraphic ) ? GetOrthoMatrix() : GetPerspectiveMatrix();
}
	


//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 視野変換行列の取得
//
// @return / Matrix4x4F : 視野変換行列
//
// @note : 
//
// 視野変換行列( 視点変換行列 LookAt )を返す。
//----------------------------------------------------------------------------------------------------------------------------------
Matrix4x4F Camera::GetViewMatrix() 
{
	return GetLookAtMatrix();
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 透視投影変換行列の取得
//
// @return / Matrix4x4F : 透視投影変換行列
//
// @note : 
//
// 透視投影変換行列を返す。
//----------------------------------------------------------------------------------------------------------------------------------
Matrix4x4F Camera::GetPerspectiveMatrix()
{
	return 
		NS_Graphic::NS_GraphicMathematics::PerspectiveMatrixRH( 
			m_Desc.fieldOfView, 
			m_Desc.aspect, 
			m_Desc.zNear, 
			m_Desc.zFar 
		);
}
	


//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 平行投影変換行列の取得
//
// @return / Matrix4x4F : 平行投影変換行列
//
// @note : 
//
// 平行投影変換行列を返す。
//----------------------------------------------------------------------------------------------------------------------------------
Matrix4x4F Camera::GetOrthoMatrix()
{
	return
		NS_Graphic::NS_GraphicMathematics::OrthoMatrixRH(
			-m_Desc.orthoSize / 2,
			 m_Desc.orthoSize / 2,
			-( ( (float)m_Desc.viewport.height / m_Desc.viewport.width ) * m_Desc.orthoSize ) / 2,
			 ( ( (float)m_Desc.viewport.height / m_Desc.viewport.width ) * m_Desc.orthoSize ) / 2,
			 m_Desc.zNear,
			 m_Desc.zFar
		);
/*
	return
		NS_Graphic::NS_GraphicMathematics::OrthoMatrixRH(
			-m_Desc.orthoSize,
			 m_Desc.orthoSize,
			-m_Desc.orthoSize,
			 m_Desc.orthoSize,
			 m_Desc.zNear,
			 m_Desc.zFar
		);*/
}
	


//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 視点変換行列の取得
//
// @return / Matrix4x4F : 視点変換行列
//
// @note : 
//
// 視点変換行列を返す。
//----------------------------------------------------------------------------------------------------------------------------------
Matrix4x4F Camera::GetLookAtMatrix()
{
	Vector3DF mat4 = GetLookAt();
	


	return
		NS_Graphic::NS_GraphicMathematics::LookAtMatrixRH(
			GetEye(),
			GetLookAt(),
			GetUp()
		);
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 視点の取得
//
// @return / const Vector3DF& : 視点
//
// @note : 
//
// 視点を返す。
// カメラの座標を視点とする。
//----------------------------------------------------------------------------------------------------------------------------------
const Vector3DF& Camera::GetEye() const 
{
	return m_Desc.eye;
}




//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 視点の設定
//
// @param [in] / const Vector3DF& vec3Eye : 視点
//
// @note : 
//
// 視点を設定する。
//----------------------------------------------------------------------------------------------------------------------------------
void Camera::SetEye( const Vector3DF& vec3Eye ) 
{
	m_Desc.eye = vec3Eye;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 注視点の取得
//
// @return / Vector3DF : 注視点
//
// @note : 
//
// 注視点のを返す。
// カメラの前方向を注視点とする。
//----------------------------------------------------------------------------------------------------------------------------------
Vector3DF Camera::GetLookAt() const
{
	return m_Desc.lookAt;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 注視点の設定
//
// @param [in] / const Vector3DF& vec3LookAt : 注視点
//
// @note : 
//
// 注視点を設定する。
//----------------------------------------------------------------------------------------------------------------------------------
void Camera::SetLookAt( const Vector3DF& vec3LookAt ) 
{
	m_Desc.lookAt = vec3LookAt;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 上ベクトルの取得
//
// @return / const Vector3DF& : 上ベクトル
//
// @note : 
//
// 上ベクトルのを返す。
//----------------------------------------------------------------------------------------------------------------------------------
const Vector3DF& Camera::GetUp() const
{
	return m_Desc.up;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 上ベクトルの設定
//
// @param [in] / const Vector3DF& vec3Up : 上ベクトル
//
// @note : 
//
// 上ベクトルを設定する。
//----------------------------------------------------------------------------------------------------------------------------------
void Camera::SetUp( const Vector3DF& vec3Up ) 
{
	m_Desc.up = vec3Up;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : カメラ記述子の取得
//
// @return / const CAMERA_DESC& : カメラ記述子
//
// @note : 
//
// カメラ記述子を返す。
//----------------------------------------------------------------------------------------------------------------------------------
const CAMERA_DESC& Camera::GetCameraDesc() const 
{
	return m_Desc;
}
	


//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : カメラ記述子の設定
//
// @param [in] / const CAMERA_DESC& desc : カメラ記述子
//
// @note : 
//
// カメラ記述子を設定する。
//----------------------------------------------------------------------------------------------------------------------------------
void Camera::SetCameraDesc( const CAMERA_DESC& desc ) 
{
	m_Desc = desc;
}
	


//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 視野角の設定
//
// @param [in] / const float fFieldOfView : 視野角
//
// @note : 
//
// 視野角を設定する。
//----------------------------------------------------------------------------------------------------------------------------------
void Camera::SetFieldOfView( const float fFieldOfView ) 
{
	m_Desc.fieldOfView = fFieldOfView;
}
	


//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : アスペクト比の設定
//
// @param [in] / const float fAspect : アスペクト比
//
// @note : 
//
// アスペクト比を設定する。
//----------------------------------------------------------------------------------------------------------------------------------
void Camera::SetAspect( const float fAspect )
{
	m_Desc.aspect = fAspect;
}
	


//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : Near面の設定
//
// @param [in] / const float fZNear : Near面
//
// @note : 
//
// Near面を設定する。
//----------------------------------------------------------------------------------------------------------------------------------
void Camera::SetZNear( const float fZNear )
{
	m_Desc.zNear = fZNear;
}
	


//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : Far面の設定
//
// @param [in] / const float fZFar : Far面
//
// @note : 
//
// Far面を設定する。
//----------------------------------------------------------------------------------------------------------------------------------
void Camera::SetZFar( const float fZFar )
{
	m_Desc.zFar = fZFar;
}
	


//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 平行投影グラフィックの表示領域のサイズの設定
//
// @param [in] / const float fOrthoSize : 平行投影グラフィックの表示領域のサイズ
//
// @note : 
//
// 平行投影グラフィックの表示領域のサイズを設定する。
//----------------------------------------------------------------------------------------------------------------------------------
void Camera::SetOrthoSize( const float fOrthoSize )
{
	m_Desc.orthoSize = fOrthoSize;
}
	


//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : クリアカラーの設定
//
// @param [in] / const Color4F& clearColor : クリアカラー
//
// @note : 
//
// クリアカラーを設定する。
//----------------------------------------------------------------------------------------------------------------------------------
void Camera::SetClearColor( const Color4F& clearColor )
{
	m_Desc.clearColor = clearColor;
}
	


//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : ビューポートの設定
//
// @param [in] / const VIEWPORT_DESC& viewport : ビューポート
//
// @note : 
//
// ビューポートを設定する。
//----------------------------------------------------------------------------------------------------------------------------------
void Camera::SetViewport( const VIEWPORT_DESC& viewport )
{
	m_Desc.viewport = viewport;
}