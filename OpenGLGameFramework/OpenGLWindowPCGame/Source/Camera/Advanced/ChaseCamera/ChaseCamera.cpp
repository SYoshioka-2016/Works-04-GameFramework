//==================================================================================================================================
// インクルード
//==================================================================================================================================

#ifndef _INCLUDE_GUARD_CHASECAMERA_H_
#include "ChaseCamera.h"
#endif	// #ifndef _INCLUDE_GUARD_CHASECAMERA_H_

#ifndef _INCLUDE_GUARD_MYUTILITYLIB_H_
#include <MyUtilityLib.h>
#endif	// #ifndef _INCLUDE_GUARD_MYUTILITYLIB_H_

#ifndef _INCLUDE_GUARD_OPENGLGRAPHICLIB_H_
#include <OpenGLGraphicLib.h>
#endif	// #ifndef _INCLUDE_GUARD_OPENGLGRAPHICLIB_H_



//==================================================================================================================================
// usingディレクティブ
//==================================================================================================================================

// ゲーム名前空間
using namespace NS_OpenGLWindowPCGame;



//==================================================================================================================================
// 関数定義
//==================================================================================================================================

//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : コンストラクタ
//
// @note : 
//
//----------------------------------------------------------------------------------------------------------------------------------
ChaseCamera::ChaseCamera() : ChaseCamera( CAMERA_DESC(), CHASE_CAMERA_DESC() )
{ 

}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : コンストラクタ
//
// @param [in] / const CAMERA_DESC&			cameraDesc		: カメラ記述子
// @param [in] / const CHASE_CAMERA_DESC&	chaseCameraDesc : 追跡カメラ記述子
//
// @note : 
//
//----------------------------------------------------------------------------------------------------------------------------------
ChaseCamera::ChaseCamera( 
	const CAMERA_DESC& cameraDesc, 
	const CHASE_CAMERA_DESC& chaseCameraDesc 
) : 
	Camera( cameraDesc ),
	m_ChaseCameraDesc( chaseCameraDesc )
{ 

}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : デストラクタ
//
// @note : 
//
//----------------------------------------------------------------------------------------------------------------------------------
ChaseCamera::~ChaseCamera() 
{

}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 更新処理
//
// @note : 
//
// 更新処理を行う。
// ターゲットによってカメラの設定を変える為、
// ターゲットの移動処理よりも後で行うようにする。
//----------------------------------------------------------------------------------------------------------------------------------
void ChaseCamera::Update() 
{
	// カメラのセッティング
	SettingCamera();
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 追跡カメラ記述子の取得
//
// @return / const CHASE_CAMERA_DESC& : 追跡カメラ記述子
//
// @note : 
//
// 追跡カメラ記述子を返す。
//----------------------------------------------------------------------------------------------------------------------------------
const CHASE_CAMERA_DESC& ChaseCamera::GetChaseCameraDesc() const 
{
	return m_ChaseCameraDesc;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : ターゲットとの距離の設定
//
// @param [in] / const float fDistance : ターゲットとの距離
//
// @note : 
//
// ターゲットとの距離を設定する。
//----------------------------------------------------------------------------------------------------------------------------------
void ChaseCamera::SetDistance( const float fDistance ) 
{
	m_ChaseCameraDesc.distance = fDistance;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 垂直方向回転角の設定
//
// @param [in] / const float fVerticalAngle : 垂直方向回転角( 度数角 )
//
// @note : 
//
// 垂直方向回転角を設定する。
//----------------------------------------------------------------------------------------------------------------------------------
void ChaseCamera::SetVerticalAngle( const float fVerticalAngle ) 
{
	m_ChaseCameraDesc.verticalAngle = fVerticalAngle;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 水平方向回転角の設定
//
// @param [in] / const float fHorizontalAngle : 水平方向回転角( 度数角 )
//
// @note : 
//
// 水平方向回転角を設定する。
//----------------------------------------------------------------------------------------------------------------------------------
void ChaseCamera::SetHorizontalAngle( const float fHorizontalAngle )
{
	m_ChaseCameraDesc.horizontalAngle = fHorizontalAngle;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : ターゲットの設定
//
// @param [in] / Vector3DF*	pvec3Target : ターゲット
//
// @note : 
//
// ターゲットを設定する。
//----------------------------------------------------------------------------------------------------------------------------------
void ChaseCamera::SetTarget( Vector3DF* pvec3Target )
{
	// ターゲットの位置が無ければ処理しない
	if ( NULL_CHECK( pvec3Target ) ) { return; }



	// ターゲットの位置を設定
	m_ChaseCameraDesc.target = pvec3Target;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : ターゲットからのオフセット位置の設定
//
// @param [in] / const Vector3DF& vec3Offset : ターゲットからのオフセット位置
//
// @note : 
//
// ターゲットからのオフセット位置を設定する。
//----------------------------------------------------------------------------------------------------------------------------------
void ChaseCamera::SetOffset( const Vector3DF& vec3Offset )
{
	// ターゲットからのオフセット位置を設定
	m_ChaseCameraDesc.offset = vec3Offset;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : カメラのセッティング
//
// @note : 
//
// 視点、注視点、上ベクトルを設定する。
// 視点をターゲットの位置から後ろに指定の距離だけ移動し、
// ターゲットの位置を中心に垂直、水平方向にそれぞれ指定の角度だけ回転した位置に設定する。
//----------------------------------------------------------------------------------------------------------------------------------
void ChaseCamera::SettingCamera() 
{
	// ターゲットの位置が無ければ処理しない
	if ( NULL_CHECK( m_ChaseCameraDesc.target ) ) { return; }

	

	// 視点を指定の距離だけ離れて、x軸に指定の角度だけ回転した位置にする
	m_Desc.eye = 
		NS_Graphic::NS_GraphicMathematics::RotateVector( 
			Vector3DF( 0, 0, m_ChaseCameraDesc.distance ), 
			Vector3DF( 1, 0, 0 ), 
			m_ChaseCameraDesc.verticalAngle 
		);

	// 視点をy軸に指定の角度だけ回転した位置にする
	m_Desc.eye = 
		NS_Graphic::NS_GraphicMathematics::RotateVector( 
			m_Desc.eye, 
			Vector3DF( 0, 1, 0 ), 
			m_ChaseCameraDesc.horizontalAngle 
		);
	
	

	// カメラの上ベクトルを真上からx軸に指定の角度だけ回転したベクトルにする
	m_Desc.up = 
		NS_Graphic::NS_GraphicMathematics::RotateVector( 
			Vector3DF( 0, 1, 0 ), 
			Vector3DF( 1, 0, 0 ), 
			m_ChaseCameraDesc.verticalAngle 
		);
	
	// カメラの上ベクトルをy軸に指定の角度だけ回転したベクトルにする
	m_Desc.up = 
		NS_Graphic::NS_GraphicMathematics::RotateVector( 
			m_Desc.up, 
			Vector3DF( 0, 1, 0 ), 
			m_ChaseCameraDesc.horizontalAngle 
		);



	// 注視点にターゲットとそこからオフセットの値だけ離れた位置を設定する
	m_Desc.lookAt = *m_ChaseCameraDesc.target + m_ChaseCameraDesc.offset;

	// 視点の基準を原点から注視点に移動する
	m_Desc.eye += m_Desc.lookAt;
}