#ifndef _INCLUDE_GUARD_GAMECAMERA_H_
#define _INCLUDE_GUARD_GAMECAMERA_H_



//==================================================================================================================================
// インクルード
//==================================================================================================================================
#ifndef _INCLUDE_GUARD_CAMERA_H_
#include "Base/Camera.h"
#endif	// #ifndef _INCLUDE_GUARD_CAMERA_H_



//==================================================================================================================================
// 名前空間
//==================================================================================================================================

//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : ゲーム名前空間
//
// @note : 
//
// ゲームアプリケーション関連の関数やクラスを管理する名前空間。
// ゲームを構成するクラスは全てこの名前空間に置くようにする。
//----------------------------------------------------------------------------------------------------------------------------------
namespace NS_OpenGLWindowPCGame
{



//==================================================================================================================================
// クラス定義
//==================================================================================================================================

//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : ゲームカメラクラス
//
// @extends / Camera : カメラクラス
//
// @note : 
//
// カメラクラスを派生させ、機能を拡張したクラス。
//----------------------------------------------------------------------------------------------------------------------------------
class GameCamera : public Camera
{

public:

	//----------------------------------------------------------------------------------------------------------------------------------
	// @purpose : コンストラクタ
	//
	// @param [in] / const float fViewingAngle	: 視野角
	// @param [in] / const float fAspect		: アスペクト比
	// @param [in] / const float fNear			: Near面
	// @param [in] / const float fFar			: Far面
	//
	// @note :
	//
	//----------------------------------------------------------------------------------------------------------------------------------
	GameCamera( 
		const float fViewingAngle, 
		const float fAspect,
		const float fNear, 
		const float fFar
	);



	//----------------------------------------------------------------------------------------------------------------------------------
	// @purpose : デストラクタ
	//
	// @note : 
	//
	//----------------------------------------------------------------------------------------------------------------------------------
	~GameCamera();

	

	//----------------------------------------------------------------------------------------------------------------------------------
	// @purpose : 垂直方向回り込みトラック処理
	//
	// @param [in] / float fVerticalAngle	: カメラの垂直方向回転角
	// @param [in] / float fDeltaAngle		: 1フレームの回転角
	//
	// @note : 
	//
	// カメラの垂直方向回転角を指定の数値になるまで変化させる。
	// 更新処理の中で呼ぶようにする。
	//----------------------------------------------------------------------------------------------------------------------------------
	void WraparoundTrackVerticalToward( float fVerticalAngle, float fDeltaAngle );



	//----------------------------------------------------------------------------------------------------------------------------------
	// @purpose : 上回り込みトラック処理
	//
	// @param [in] / float fDeltaAngle : 1フレームの回転角
	//
	// @note : 
	//
	// カメラの垂直方向回転角を加算する。
	// 更新処理の中で呼ぶようにする。
	//----------------------------------------------------------------------------------------------------------------------------------
	void WraparoundTrackUpToward( float fDeltaAngle );



	//----------------------------------------------------------------------------------------------------------------------------------
	// @purpose : 下回り込みトラック処理
	//
	// @param [in] / float fDeltaAngle : 1フレームの回転角
	//
	// @note : 
	//
	// カメラの垂直方向回転角を減算する。
	// 更新処理の中で呼ぶようにする。
	//----------------------------------------------------------------------------------------------------------------------------------
	void WraparoundTrackDownToward( float fDeltaAngle );



	//----------------------------------------------------------------------------------------------------------------------------------
	// @purpose : 水平方向回り込みトラック処理
	//
	// @param [in] / float fHorizontalAngle	: カメラの水平方向回転角
	// @param [in] / float fDeltaAngle		: 1フレームの回転角
	//
	// @note : 
	//
	// カメラの水平方向回転角を指定の数値になるまで変化させる。
	// 更新処理の中で呼ぶようにする。
	//----------------------------------------------------------------------------------------------------------------------------------
	void WraparoundTrackHorizontalToward( float fHorizontalAngle, float fDeltaAngle );



	//----------------------------------------------------------------------------------------------------------------------------------
	// @purpose : 右回り込みトラック処理
	//
	// @param [in] / float fDeltaAngle : 1フレームの回転角
	//
	// @note : 
	//
	// カメラの水平方向回転角を減算する。
	// 更新処理の中で呼ぶようにする。
	//----------------------------------------------------------------------------------------------------------------------------------
	void WraparoundTrackRightToward( float fDeltaAngle );



	//----------------------------------------------------------------------------------------------------------------------------------
	// @purpose : 左回り込みトラック処理
	//
	// @param [in] / float fDeltaAngle : 1フレームの回転角
	//
	// @note : 
	//
	// カメラの水平方向回転角を加算する。
	// 更新処理の中で呼ぶようにする。
	//----------------------------------------------------------------------------------------------------------------------------------
	void WraparoundTrackLeftToward( float fDeltaAngle );



	//----------------------------------------------------------------------------------------------------------------------------------
	// @purpose : ズーム処理
	//
	// @param [in] / float fViewingAngle	: 視野角
	// @param [in] / float fDeltaAngle		: 1フレームの視野角の変化量の大きさ
	//
	// @note : 
	//
	// カメラの視野角を指定の数値になるまで変化させる。
	// 更新処理の中で呼ぶようにする。
	//----------------------------------------------------------------------------------------------------------------------------------
	void ZoomToward( float fViewingAngle, float fDeltaAngle );



	//----------------------------------------------------------------------------------------------------------------------------------
	// @purpose : ズームイン処理
	//
	// @param [in] / float fDeltaAngle		: 1フレームの視野角の変化量の大きさ
	//
	// @note : 
	//
	// カメラの視野角を狭くする。
	// 更新処理の中で呼ぶようにする。
	//----------------------------------------------------------------------------------------------------------------------------------
	void ZoomInToward( float fDeltaAngle );



	//----------------------------------------------------------------------------------------------------------------------------------
	// @purpose : ズームアウト処理
	//
	// @param [in] / float fDeltaAngle		: 1フレームの視野角の変化量の大きさ
	//
	// @note : 
	//
	// カメラの視野角を広くする。
	// 更新処理の中で呼ぶようにする。
	//----------------------------------------------------------------------------------------------------------------------------------
	void ZoomOutToward( float fDeltaAngle );



	//----------------------------------------------------------------------------------------------------------------------------------
	// @purpose : ズーム処理
	//
	// @param [in] / float fZoomInViewingAngle	: ズームインの視野角
	// @param [in] / float fZoomOutViewingAngle	: ズームアウトの視野角
	// @param [in] / float fDeltaAngle			: 1フレームの視野角の変化量の大きさ
	//
	// @note : 
	//
	// カメラの視野角を指定の数値になるまで変化させる。
	// 追跡対象の移動方向とカメラの前方向によってズームを切り替える。
	// 更新処理の中で呼ぶようにする。
	//----------------------------------------------------------------------------------------------------------------------------------
	void ZoomToward( 
		float fZoomInViewingAngle, 
		float fZoomOutViewingAngle, 
		float fDeltaAngle  
	);



	//----------------------------------------------------------------------------------------------------------------------------------
	// @purpose : ロール回転処理
	//
	// @param [in] / const float	fRollAngle	: ロール回転角
	// @param [in] / float			fDeltaAngle	: 1フレームの回転角
	//
	// @note : 
	//
	// カメラのロール回転角を指定の数値になるまで変化させる。
	// 更新処理の中で呼ぶようにする。
	//----------------------------------------------------------------------------------------------------------------------------------
	void RollToward( const float fPitchAngle, float fDeltaAngle );



	//----------------------------------------------------------------------------------------------------------------------------------
	// @purpose : 右ロール回転処理
	//
	// @param [in] / float fDeltaAngle : 1フレームの回転角
	//
	// @note : 
	//
	// カメラのロール回転角を加算する。
	// 更新処理の中で呼ぶようにする。
	//----------------------------------------------------------------------------------------------------------------------------------
	void RollRightToward( float fDeltaAngle );



	//----------------------------------------------------------------------------------------------------------------------------------
	// @purpose : 左ロール回転処理
	//
	// @param [in] / float fDeltaAngle : 1フレームの回転角
	//
	// @note : 
	//
	// カメラのロール回転角を減算する。
	// 更新処理の中で呼ぶようにする。
	//----------------------------------------------------------------------------------------------------------------------------------
	void RollLeftToward( float fDeltaAngle );



	//----------------------------------------------------------------------------------------------------------------------------------
	// @purpose : 垂直方向回転角の取得
	//
	// @return / float : 垂直方向回転角
	//	
	// @note : 
	//
	// 垂直方向回転角を返す。
	//----------------------------------------------------------------------------------------------------------------------------------
	float GetVerticalAngle() const;



	//----------------------------------------------------------------------------------------------------------------------------------
	// @purpose : 水平方向回転角の取得
	//
	// @return / float : 水平方向回転角
	//	
	// @note : 
	//
	// 水平方向回転角を返す。
	//----------------------------------------------------------------------------------------------------------------------------------
	float GetHorizontalAngle() const;



	//----------------------------------------------------------------------------------------------------------------------------------
	// @purpose : 移動ベクトルの取得
	//
	// @return / Vector3DF : 移動ベクトル
	//	
	// @note : 
	//
	// 移動ベクトルを返す。
	//----------------------------------------------------------------------------------------------------------------------------------
	Vector3DF GetMoveVector() const;



	//----------------------------------------------------------------------------------------------------------------------------------
	// @purpose : 垂直方向回転角の設定
	//
	// @param [in] / const float fVerticalAngle	: 垂直方向の回転角
	//	
	// @note : 
	//
	// カメラの垂直方向回転角を設定する。
	//----------------------------------------------------------------------------------------------------------------------------------
	void SetVerticalAngle( const float fVerticalAngle );



	//----------------------------------------------------------------------------------------------------------------------------------
	// @purpose : 水平方向回転角の設定
	//
	// @param [in] / const float fVerticalAngle	: 水平方向の回転角
	//	
	// @note : 
	//
	// カメラの水平方向回転角を設定する。
	//----------------------------------------------------------------------------------------------------------------------------------
	void SetHorizontalAngle( const float fHorizontalAngle );



	//----------------------------------------------------------------------------------------------------------------------------------
	// @purpose : 追跡対象の設定
	//
	// @param [in] / Vector3DF*		pvec3LookTarget				: 注視するターゲットの位置
	// @param [in] / const float	fDistance					: 注視点から視点までの距離
	//	
	// @note : 
	//
	// 注視するターゲットの位置、追跡対象との距離を設定する。
	//----------------------------------------------------------------------------------------------------------------------------------
	void SetChaseTarget( 
		Vector3DF*		pvec3LookTarget, 
		const float		fDistance
	);

	

	//----------------------------------------------------------------------------------------------------------------------------------
	// @purpose : 更新処理
	//
	// @note : 
	//
	//
	//----------------------------------------------------------------------------------------------------------------------------------
	void update();

private:

	//----------------------------------------------------------------------------------------------------------------------------------
	// @purpose : カメラのセッティング
	//
	// @note : 
	//
	// 視点、上ベクトル、注視点を設定する。
	// 注視するターゲットの位置から後ろに指定の距離だけ移動し、
	// 注視するターゲットの位置を中心に垂直、水平方向にそれぞれ指定の角度だけ回転した位置に視点を設定する。
	//----------------------------------------------------------------------------------------------------------------------------------
	void SettingCamera();


	
	//----------------------------------------------------------------------------------------------------------------------------------
	// @purpose : カメラの前方向ベクトルの取得
	//
	// @return / Vector3DF : カメラの前方向ベクトル
	//	
	// @note : 
	//
	// カメラの前方向ベクトルを返す。
	//----------------------------------------------------------------------------------------------------------------------------------
	Vector3DF GetCameraForward() const;



	//----------------------------------------------------------------------------------------------------------------------------------
	// @purpose : ターゲットの移動ベクトルの取得
	//
	// @return / Vector3DF : ターゲットの移動ベクトル
	//	
	// @note : 
	//
	// ターゲットの移動ベクトルを返す。
	//----------------------------------------------------------------------------------------------------------------------------------
	Vector3DF GetTergetMoveVector() const;



	//----------------------------------------------------------------------------------------------------------------------------------
	// @purpose : ターゲットの移動方向ベクトルの取得
	//
	// @return / Vector3DF : ターゲットの移動方向ベクトル
	//	
	// @note : 
	//
	// ターゲットの移動方向ベクトルを返す。
	//----------------------------------------------------------------------------------------------------------------------------------
	Vector3DF GetTergetMoveDirection() const;

private:

	// メンバ変数

	// ターゲットとカメラの距離
	float		m_fDistance;

	// ターゲットを中心としたカメラの垂直方向回転角
	float		m_fVerticalAngle;

	// ターゲットを中心としたカメラの水平方向回転角
	float		m_fHorizontalAngle;

	// ロール回転角
	float		m_fRollAngle;

	// 注視ターゲットの位置
	Vector3DF*	m_pvec3LookTarget;

	// 1フレーム前の注視ターゲットの位置
	Vector3DF	m_vec3PrevLookTarget;

	// 1フレーム前の視点
	Vector3DF	m_vec3PrevPosition;
};



}	// namespace NS_OpenGLWindowPCGame



#endif	// #ifndef _INCLUDE_GUARD_GAMECAMERA_H_