//==================================================================================================================================
// インクルード
//==================================================================================================================================

#ifndef _INCLUDE_GUARD_GAMEOBJECT_H_
#include "GameObject.h"
#endif	// #ifndef _INCLUDE_GUARD_GAMEOBJECT_H_



//==================================================================================================================================
// usingディレクティブ
//==================================================================================================================================

// ゲーム名前空間
using namespace NS_OpenGLWindowPCGame;



//==================================================================================================================================
// 関数定義
//==================================================================================================================================

//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : コンストラクタ
//
// @note : 
//
//----------------------------------------------------------------------------------------------------------------------------------
GameObject::GameObject() : 
	m_Transform( Transform() ), 
	m_SphereCollider( SphereCollider( m_Transform ) ),
	m_bCollisionFlg( false ),
	m_bPrevCollisionFlg( false ),
	m_bDestroyFlg( false ),
	m_strName( "" )
{ 

}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : デストラクタ
//
// @note : 
//
//----------------------------------------------------------------------------------------------------------------------------------
GameObject::~GameObject() 
{
	// 終了処理
	End();
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 開始処理
//
// @note : 
//
// ゲームオブジェクトの管理クラスに自身が追加された時に1回実行される。
//----------------------------------------------------------------------------------------------------------------------------------
void GameObject::Start() 
{

}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 更新処理
//
// @note : 
//
// ゲームオブジェクトの管理クラスに管理されている間実行される。
//----------------------------------------------------------------------------------------------------------------------------------
void GameObject::Update() 
{

}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 描画処理
//
// @note : 
//
// ゲームオブジェクトの管理クラスに管理されている間実行される。
//----------------------------------------------------------------------------------------------------------------------------------
void GameObject::Draw() 
{

}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 終了処理
//
// @note : 
//
// 自身が削除される時に1回実行される。
//----------------------------------------------------------------------------------------------------------------------------------
void GameObject::End() 
{

}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 衝突処理
//
// @param [in] / const GameObject& gameObject : ゲームオブジェクトの参照
//
// @note : 
//
// ゲームオブジェクト同士の衝突処理を行う。
// 衝突の判定をフラグで管理し、フラグの状態によって衝突処理の仮想関数を実行する。
//----------------------------------------------------------------------------------------------------------------------------------
void GameObject::CollisionHandling( const GameObject& gameObject )
{
	// ゲームオブジェクト同士の衝突判定を取得
	if ( !m_SphereCollider.CollisionDetection( gameObject.GetSphereCollider() ) ) { return; }



	// 衝突中処理
	OnColliding( gameObject );
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 破棄するか?
//
// @return / bool : 破棄するか?( true : 破棄する | false : 破棄しない )
//
// @note : 
//
// 破棄フラグを返す。
//----------------------------------------------------------------------------------------------------------------------------------
bool GameObject::IsDestroy() const 
{
	return m_bDestroyFlg;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : トランスフォームの取得
//
// @return / const Transform& : トランスフォーム
//
// @note : 
//
// トランスフォームを返す。
//----------------------------------------------------------------------------------------------------------------------------------
const Transform& GameObject::GetTransform() const 
{
	return m_Transform;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : スフィアコライダの取得
//
// @return / const SphereCollider& : スフィアコライダ
//
// @note : 
//
// スフィアコライダを返す。
//----------------------------------------------------------------------------------------------------------------------------------
const SphereCollider& GameObject::GetSphereCollider() const 
{
	return m_SphereCollider;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 名前の取得
//
// @return / const char* : 名前
//
// @note : 
//
// 名前を返す。
//----------------------------------------------------------------------------------------------------------------------------------
const char* GameObject::GetName() const 
{
	return m_strName.c_str();
}

	

//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 名前の設定
//
// @param [in] / const char* strName : 名前
//
// @note : 
//
// 名前を設定する。
//----------------------------------------------------------------------------------------------------------------------------------
void GameObject::SetName( const char* strName ) 
{
	// ポインタチェック
	ASSERT_POINTER_CHECK( strName );



	m_strName = strName;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 衝突中処理
//
// @note : 
//
// 他のゲームオブジェクトと衝突している間実行される。
//----------------------------------------------------------------------------------------------------------------------------------
void GameObject::OnColliding( const GameObject& gameObject ) 
{

}