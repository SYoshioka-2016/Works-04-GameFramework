//==================================================================================================================================
// インクルード
//==================================================================================================================================

#ifndef _INCLUDE_GUARD_GAMEOBJECTMANAGER_H_
#include "GameObjectManager.h"
#endif	// #ifndef _INCLUDE_GUARD_GAMEOBJECTMANAGER_H_

#ifndef _INCLUDE_GUARD_GAMEOBJECTREMOVE_H_
#include "../Base/GameObjectRemove.h"
#endif	// #ifndef _INCLUDE_GUARD_GAMEOBJECTREMOVE_H_



//==================================================================================================================================
// usingディレクティブ
//==================================================================================================================================

// ゲーム名前空間
using namespace NS_OpenGLWindowPCGame;



//==================================================================================================================================
// 関数定義
//==================================================================================================================================

//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : コンストラクタ
//
// @note : 
//
//----------------------------------------------------------------------------------------------------------------------------------
GameObjectManager::GameObjectManager() : m_GameObjectList( GameObjectList() )
{ 

}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : デストラクタ
//
// @note : 
//
//----------------------------------------------------------------------------------------------------------------------------------
GameObjectManager::~GameObjectManager() 
{
	// 全てのゲームオブジェクトを削除する
	for each ( auto pGameObject in m_GameObjectList ) 
	{
		// ゲームオブジェクトが無ければ処理しない
		if ( NULL_CHECK( pGameObject ) ) { continue; }



		// ゲームオブジェクトの終了処理
		pGameObject->End();

		// ゲームオブジェクトを削除
		SAFE_DELETE( pGameObject );
	}

	// ゲームオブジェクトリストをクリア
	m_GameObjectList.clear();
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 更新処理
//
// @note : 
//
//----------------------------------------------------------------------------------------------------------------------------------
void GameObjectManager::Update() 
{
	// ゲームオブジェクトを破棄する
	m_GameObjectList.remove_if( GameObjectRemove() );



	// 全てのゲームオブジェクトを更新する
	for each ( auto pGameObject in m_GameObjectList ) 
	{
		// ゲームオブジェクトが無ければ処理しない
		if ( NULL_CHECK( pGameObject ) ) { continue; }



		// ゲームオブジェクトの更新処理
		pGameObject->Update();
	}



	// 全てのゲームオブジェクトの衝突処理
	for each ( auto pGameObject1 in m_GameObjectList ) 
	{
		for each ( auto pGameObject2 in m_GameObjectList ) 
		{
			// ゲームオブジェクトが無ければ処理しない
			if ( NULL_CHECK( pGameObject1 ) ) { break; }
			
			// ゲームオブジェクトが無ければ処理しない
			if ( NULL_CHECK( pGameObject2 ) ) { continue; }
			
			// 同じゲームオブジェクトなら処理しない
			if ( pGameObject1 == pGameObject2 ) { continue; }



			// ゲームオブジェクトの衝突処理
			pGameObject1->CollisionHandling( *pGameObject2 );
		}
	}
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 描画処理
//
// @note : 
//
//----------------------------------------------------------------------------------------------------------------------------------
void GameObjectManager::Draw() 
{
	// 全てのゲームオブジェクトを描画する
	for each ( auto pGameObject in m_GameObjectList ) 
	{
		// ゲームオブジェクトが無ければ処理しない
		if ( NULL_CHECK( pGameObject ) ) { continue; }


		
		// ゲームオブジェクトの描画処理
		pGameObject->Draw();
	}
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : ゲームオブジェクトの追加
//
// @param [in] / GameObject* pGameObject : ゲームオブジェクト
//
// @note : 
//
// ゲームオブジェクトリストに指定のゲームオブジェクトを追加する。
//----------------------------------------------------------------------------------------------------------------------------------
void GameObjectManager::AddGameObject( GameObject* pGameObject ) 
{
	// ポインタチェック
	ASSERT_POINTER_CHECK( pGameObject );



	// ゲームオブジェクトの開始処理
	pGameObject->Start();

	// ゲームオブジェクトリストにゲームオブジェクトを追加する
	m_GameObjectList.push_back( pGameObject );
}