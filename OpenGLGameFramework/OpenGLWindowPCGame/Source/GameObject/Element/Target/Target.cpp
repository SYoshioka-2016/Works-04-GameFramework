//==================================================================================================================================
// インクルード
//==================================================================================================================================

#ifndef _INCLUDE_GUARD_TARGET_H_
#include "Target.h"
#endif	// #ifndef _INCLUDE_GUARD_TARGET_H_

#ifndef _INCLUDE_GUARD_GAMEOBJECTNAMEDEFINES_H_
#include "../../GameObjectNameDefines.h"
#endif	// #ifndef _INCLUDE_GUARD_GAMEOBJECTNAMEDEFINES_H_

#ifndef _INCLUDE_GUARD_OPENGLGRAPHICLIB_H_
#include <OpenGLGraphicLib.h>
#endif	// #ifndef _INCLUDE_GUARD_OPENGLGRAPHICLIB_H_



//==================================================================================================================================
// usingディレクティブ
//==================================================================================================================================

// ゲーム名前空間
using namespace NS_OpenGLWindowPCGame;



//==================================================================================================================================
// 関数定義
//==================================================================================================================================

//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : コンストラクタ
//
// @note : 
//
//----------------------------------------------------------------------------------------------------------------------------------
Target::Target() 
{ 
	SetName( TARGET_NAME );
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : デストラクタ
//
// @note : 
//
//----------------------------------------------------------------------------------------------------------------------------------
Target::~Target() 
{

}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 初期化処理
//
// @param [in] / const float		fMoveSpeed				: 移動の速さ
// @param [in] / const Vector3DF&	vec3Position			: 座標
// @param [in] / const Vector3DF&	vec3Rotation			: 回転角
// @param [in] / const Vector3DF&	vec3Scale				: スケール値
//
// @note : 
//
// 初期化処理を行う。
// シーンの初期化処理で行うようにする。
//----------------------------------------------------------------------------------------------------------------------------------
void Target::Initialize(
	const float			fMoveSpeed, 
	const Vector3DF&	vec3Position,
	const Vector3DF&	vec3Rotation, 
	const Vector3DF&	vec3Scale
) 
{
	m_fMoveSpeed				= fMoveSpeed;
	m_Transform.position		= vec3Position;
	m_Transform.rotation		= vec3Rotation;
	m_Transform.scale			= vec3Scale;

	

	m_SphereCollider.SetRadius( 1 * vec3Scale.Length() );
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 更新処理
//
// @note : 
//
// 更新処理を行う。
// シーンの更新処理で行うようにする。
//----------------------------------------------------------------------------------------------------------------------------------
void Target::Update() 
{
	// 移動処理
	Move();
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 描画処理
//
// @note : 
//
// 描画処理を行う。
// シーンの描画処理で行うようにする。
//----------------------------------------------------------------------------------------------------------------------------------
void Target::Draw()
{
	glPushMatrix();



	glTranslatef( m_Transform.position.x, m_Transform.position.y, m_Transform.position.z );

	glRotatef( m_Transform.rotation.y, 0, 1, 0 );
	glRotatef( m_Transform.rotation.z, 0, 0, 1 );
	glRotatef( m_Transform.rotation.x, 1, 0, 0 );

	glScalef( m_Transform.scale.x, m_Transform.scale.y, m_Transform.scale.z );
	


	// モデルを描画する
	glColor3f( 1.0, 0.1, 0.2 );
	glLineWidth( 2 );
	glutWireCube( 1 );


	
	glPopMatrix();
}





void Target::OnColliding( const GameObject& gameObject ) 
{ 
	if ( std::string( gameObject.GetName() ) != ( std::string( BULLET_NAME ) ) ) { return; }



	m_bDestroyFlg = true;
}





//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 移動処理
//
// @note : 
//
// プレイヤーの移動処理を行う。
// 座標、移動方向、回転角を更新する。
//----------------------------------------------------------------------------------------------------------------------------------
void Target::Move() 
{

}