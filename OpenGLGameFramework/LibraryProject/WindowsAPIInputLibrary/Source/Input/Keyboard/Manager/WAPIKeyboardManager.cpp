//==================================================================================================================================
// インクルード
//==================================================================================================================================
#ifndef _INCLUDE_GUARD_WAPIKEYBOARDMANAGER_H_
#include "WAPIKeyboardManager.h"
#endif	// #ifndef _INCLUDE_GUARD_WAPIKEYBOARDMANAGER_H_

#ifndef _INCLUDE_GUARD_WINDOWS_H_
#define _INCLUDE_GUARD_WINDOWS_H_
#include <Windows.h>
#endif	// #ifndef _INCLUDE_GUARD_WINDOWS_H_



//==================================================================================================================================
// usingディレクティブ
//==================================================================================================================================

// キーボード名前空間
using namespace NS_Input::NS_Keyboard;



//==================================================================================================================================
// 関数定義
//==================================================================================================================================

//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : コンストラクタ
//
// @note : 
//
//----------------------------------------------------------------------------------------------------------------------------------
WAPIKeyboardManager::WAPIKeyboardManager() 
{ 
	ZeroMemory( m_ucCurrentKeyStateArray, sizeof(m_ucCurrentKeyStateArray) );
	ZeroMemory( m_ucLastKeyStateArray, sizeof(m_ucLastKeyStateArray) );
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : デストラクタ
//
// @note : 
//
//----------------------------------------------------------------------------------------------------------------------------------
WAPIKeyboardManager::~WAPIKeyboardManager() 
{ }



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : キーボードの入力状態の更新
//
// @return / HRESULT : 入力状態の更新に成功したか
//	
// @note : 
//
// キーボードの入力状態のデータを更新する。
// まず現在のキーボード入力状態を前回のキーボード入力状態としてコピーする。
// その後、現在のキーボード入力状態として最新の入力状態のデータを取得する。
// これにより現在と前回で入力状態のデータが1フレームずれ、
// 押下や遊離の瞬間を検知出来る。
//
// この関数は毎フレーム1回実行する必要がある。
//----------------------------------------------------------------------------------------------------------------------------------
HRESULT WAPIKeyboardManager::UpdateKeyState() 
{
	// 直前のキーボード入力状態として現在のキーボード入力状態を保存
	memcpy( m_ucLastKeyStateArray, m_ucCurrentKeyStateArray, sizeof(m_ucCurrentKeyStateArray) );

	// 現在( 最新 )のキーボード入力状態を取得
	if ( !GetKeyboardState( m_ucCurrentKeyStateArray ) ) 
	{ 
		DEBUG_CONSOLE_LOG( "キーボードの状態の取得に失敗しました。" ); 
	
		return E_FAIL;
	}



	return S_OK;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : キーの押下判定
//
// @param [in] / const unsigned char ucKey	: 入力判定するキー
//
// @return / bool : 指定のキーが押されているか
//	
// @note : 
//
// キーが押されているか判定する。
//
// 引数のキーは、''で囲むか「VK_○○」という定数を使う。
// キーの定数はWinUser.hに定義されている。
//
// ex) Aキー		: 'A'
//	   スペースキー : VK_SPACE
//
// キーが離されているかを判定するには、
// この関数の戻り値を否定して使う。
//
// ex) 押下判定 : if (  GetKey( キー ) ) { 〜
//     遊離判定 : if ( !GetKey( キー ) ) { 〜
//----------------------------------------------------------------------------------------------------------------------------------
bool WAPIKeyboardManager::GetKey( const unsigned char ucKey ) 
{ 
	ASSERT( 0 <= ucKey && ARRAYSIZE( m_ucCurrentKeyStateArray ) >= ucKey && "インデックスが配列の範囲外です。" );
	


	// 指定のキーとの論理積が真なら押されている
	return ( ( m_ucCurrentKeyStateArray[ ucKey ] & 0x80 ) == 0x80 );
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : キーの押下の瞬間の判定
//
// @param [in] / const unsigned char ucKey	: 入力判定するキー
//
// @return / bool : 指定のキーが押下の瞬間か
//	
// @note : 
//
// キーが押下の瞬間か判定する。
//
// 引数のキーは、''で囲むか「VK_○○」という定数を使う。
// キーの定数はWinUser.hに定義されている。
//----------------------------------------------------------------------------------------------------------------------------------
bool WAPIKeyboardManager::GetKeyDown( const unsigned char ucKey ) 
{ 
	ASSERT( 0 <= ucKey && ARRAYSIZE( m_ucCurrentKeyStateArray ) >= ucKey && "インデックスが配列の範囲外です。" );

	

	// 前回のキーが遊離状態で、現在のキーが押下状態なら押下の瞬間と判定
	return ( !( m_ucLastKeyStateArray[ ucKey ] & 0x80 ) && ( m_ucCurrentKeyStateArray[ ucKey ] & 0x80 ) );
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : キーの遊離の瞬間の判定
//
// @param [in] / const unsigned char ucKey	: 入力判定するキー
//
// @return / bool : 指定のキーが遊離の瞬間か
//	
// @note : 
//
// キーが遊離の瞬間か判定する。
//
// 引数のキーは、''で囲むか「VK_○○」という定数を使う。
// キーの定数はWinUser.hに定義されている。
//----------------------------------------------------------------------------------------------------------------------------------
bool WAPIKeyboardManager::GetKeyUp( const unsigned char ucKey ) 
{ 
	ASSERT( 0 <= ucKey && ARRAYSIZE( m_ucCurrentKeyStateArray ) >= ucKey && "インデックスが配列の範囲外です。" );

	

	// 前回のキーが押下状態で、現在のキーが遊離状態なら遊離の瞬間と判定
	return ( ( m_ucLastKeyStateArray[ ucKey ] & 0x80 ) && !( m_ucCurrentKeyStateArray[ ucKey ] & 0x80 ) );
}