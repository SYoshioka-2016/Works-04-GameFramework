//==================================================================================================================================
// インクルード
//==================================================================================================================================
#ifndef _INCLUDE_GUARD_OALDEVICE_H_
#include "OALDevice.h"
#endif	// #ifndef _INCLUDE_GUARD_OALDEVICE_H_

#ifndef _INCLUDE_GUARD_MYUTILITYLIB_H_
#include <MyUtilityLib.h>
#endif	// #ifndef _INCLUDE_GUARD_MYUTILITYLIB_H_



//==================================================================================================================================
// ライブラリリンク
//==================================================================================================================================
#pragma comment ( lib, "OpenAL32.lib" )



//==================================================================================================================================
// usingディレクティブ
//==================================================================================================================================

// サウンド名前空間
using namespace NS_Sound;



//==================================================================================================================================
// 関数定義
//==================================================================================================================================

//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : コンストラクタ
//
// @note : 
//
//----------------------------------------------------------------------------------------------------------------------------------
OALDevice::OALDevice() :
	m_bIsCreatedFlg( false ),
	m_pDevice( NULL ),
	m_pContext( NULL )
{ }



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : デストラクタ
//
// @note : 
//
//----------------------------------------------------------------------------------------------------------------------------------
OALDevice::~OALDevice() 
{
	// 解放処理
	Release();
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : OpenALデバイスの初期化
//
// @return / HRESULT : OpenALデバイスの初期化に成功したか
//	
// @note : 
//
// OpenALのデバイスやコンテキストを生成する。
// OpenALの機能を利用するにはこのセットアップの処理が必要。
//----------------------------------------------------------------------------------------------------------------------------------
HRESULT OALDevice::Initialize() 
{
	// デバイスが既に生成されていれば処理しない
	if ( m_bIsCreatedFlg ) { return ERROR_MESSAGE( "既に生成されています。" ); }



	// デバイスをオープン
	m_pDevice = alcOpenDevice( NULL );
	if ( !POINTER_CHECK( m_pDevice ) ) 
	{
		return ERROR_MESSAGE( "デバイスのオープンに失敗しました。" );
	}

	// コンテキストを生成
    m_pContext = alcCreateContext( m_pDevice, NULL );
	if ( !POINTER_CHECK( m_pContext ) ) 
	{
		return ERROR_MESSAGE( "コンテキストの生成に失敗しました。" );
	}

	// コンテキストの有効設定
	Activate();



	// エラーチェック
    if( IsError() ) 
	{
		// 解放
        Release();

		// デバイス生成フラグを降ろす
		m_bIsCreatedFlg = false;



		return ERROR_MESSAGE( "エラーを取得しました。" );
    }



	// デバイス生成フラグを立てる
	m_bIsCreatedFlg = true;



	return S_OK;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 解放処理
//
// @note : 
//
// OpenALのデバイスやコンテキストを削除する。
//----------------------------------------------------------------------------------------------------------------------------------
void OALDevice::Release() 
{
	// デバイスが生成されていなければ処理しない
	if ( !m_bIsCreatedFlg ) { return; }



	// コンテキストの無効設定
	Deactivate();

	// コンテキストを削除
	alcDestroyContext( m_pContext );
    m_pContext = NULL;

	// デバイスを削除
    alcCloseDevice( m_pDevice );
    m_pDevice = NULL;

	// エラークリア
	alGetError();

	// デバイス生成フラグを降ろす
	m_bIsCreatedFlg = false;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : コンテキストの有効設定
//
// @note : 
//
// 現在のコンテキストに事前に生成されたコンテキストを設定する。
//----------------------------------------------------------------------------------------------------------------------------------
void OALDevice::Activate() 
{
	// ポインタチェック
	ASSERT_POINTER_CHECK( m_pContext );



	// 生成されたコンテキストを設定
	alcMakeContextCurrent( m_pContext );
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : コンテキストの無効設定
//
// @note : 
//
// 現在のコンテキストにNULLを設定する。
//----------------------------------------------------------------------------------------------------------------------------------
void OALDevice::Deactivate() 
{
	// 空のコンテキストを設定
	alcMakeContextCurrent( NULL );
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : OpenALのエラー検知
//
// @return / bool : OpenALのエラーがあったか
//	
// @note : 
//
// alGetError関数でOpenALに関するエラーを取得し、
// 何かエラーが有ればメッセージを表示する。
//----------------------------------------------------------------------------------------------------------------------------------
bool OALDevice::IsError() 
{
	// エラーを取得
	ALenum error = alGetError();

	// エラーが有ればメッセージを表示
	if ( AL_NO_ERROR != error ) {
		
const ALchar* errorString = alGetString( error );
ERROR_MESSAGE( errorString );

		// エラー有り
		return true;
	}



	// エラー無し
	return false;
}