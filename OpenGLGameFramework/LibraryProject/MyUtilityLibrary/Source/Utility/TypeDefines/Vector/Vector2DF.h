#ifndef _INCLUDE_GUARD_VECTOR2DF_H_
#define _INCLUDE_GUARD_VECTOR2DF_H_



//==================================================================================================================================
// マクロ定義
//==================================================================================================================================

// 右方向ベクトル
#define VECTOR2DF_RIGHT			Vector2DF(  1,  0 )

// 左方向ベクトル
#define VECTOR2DF_LEFT			Vector2DF( -1,  0 )

// 上方向ベクトル
#define VECTOR2DF_UP			Vector2DF(  0,  1 )

// 下方向ベクトル
#define VECTOR2DF_DOWN			Vector2DF(  0, -1 )

// 1で初期化されたベクトル
#define VECTOR2DF_ONE			Vector2DF(  1,  1 )

// 零ベクトル
#define VECTOR2DF_ZERO			Vector2DF(  0,  0 )



//==================================================================================================================================
// インクルード
//==================================================================================================================================

#ifndef _INCLUDE_GUARD_CMATH_
#define _INCLUDE_GUARD_CMATH_
#include <cmath>
#endif	// #ifndef _INCLUDE_GUARD_CMATH_



//==================================================================================================================================
// クラス定義
//==================================================================================================================================

//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 2次元ベクトルクラス
//
// @note : 
//
// 2次元ベクトルを表現したクラス。
// 2つの浮動小数値を管理し、2次元座標や2次元ベクトルとして扱えるようにする。
//----------------------------------------------------------------------------------------------------------------------------------
class Vector2DF 
{
public:

	// コンストラクタ
	Vector2DF();
	
	// コンストラクタ( ベクトル成分の引数 )
	Vector2DF( const float fX, const float fY );
	
	// コンストラクタ( コピーコンストラクタ )
	Vector2DF( const Vector2DF& vec2 );



	// ベクトルの正規化
	void Normalize();

	// 零ベクトルに初期化
	void ZeroClear();

	// ベクトルの大きさ
	float Length() const;

	// 2点の2次元座標間の距離
	float Distance( const Vector2DF& vec2 ) const;

	// 2点の2次元座標間の距離( クラス関数 )
	static float Distance( const Vector2DF& vec2A, const Vector2DF& vec2B );

	// 2つの2次元ベクトルの内積
	float Dot( const Vector2DF& vec2 ) const;

	// 2つの2次元ベクトルの内積( クラス関数 )
	static float Dot( const Vector2DF& vec2A, const Vector2DF& vec2B );
/*
	// 2つの2次元ベクトルの成す角度( 度数角 )
	float angle( const Vector2DF& vec2 ) const;

	// 2つの2次元ベクトルの成す角度( 度数角 )( クラス関数 )
	static float angle( const Vector2DF& vec2A, const Vector2DF& vec2B );
*/

	
	// 加算演算子オーバーロード
	Vector2DF operator + () const;
	
	// 加算演算子オーバーロード
	Vector2DF operator + ( const Vector2DF& vec2 ) const;
	
	// 減算演算子オーバーロード
	Vector2DF operator - () const;
	
	// 減算演算子オーバーロード
	Vector2DF operator - ( const Vector2DF& vec2 ) const;
	
	// 乗算演算子オーバーロード
	Vector2DF operator * ( const float fK ) const;
	
	// 除算演算子オーバーロード
	Vector2DF operator / ( const float fK ) const;

	// 代入演算子オーバーロード
	Vector2DF& operator = ( const Vector2DF& vec2 );

	// 加算代入演算子オーバーロード
	Vector2DF& operator += ( const Vector2DF& vec2 );
	
	// 減算代入演算子オーバーロード
	Vector2DF& operator -= ( const Vector2DF& vec2 );
	
	// 乗算代入演算子オーバーロード
	Vector2DF& operator *= ( const float fK );
	
	// 除算代入演算子オーバーロード
	Vector2DF& operator /= ( const float fK );

	// 等価演算子オーバーロード
	bool operator == ( const Vector2DF& vec2 );

	// 不等価演算子オーバーロード
	bool operator != ( const Vector2DF& vec2 );

public:

	// メンバ変数

	// ベクトルのx成分
	float x;

	// ベクトルのy成分
	float y;
};



//==================================================================================================================================
// 関数定義
//==================================================================================================================================

//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : コンストラクタ
//
// @note : 
//
//----------------------------------------------------------------------------------------------------------------------------------
inline Vector2DF::Vector2DF() : 
	x( 0 ),
	y( 0 )
{ }



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : コンストラクタ
//
// @param [in] / const float fX : ベクトルのx成分
// @param [in] / const float fY : ベクトルのy成分
//
// @note : 
//
//----------------------------------------------------------------------------------------------------------------------------------
inline Vector2DF::Vector2DF( const float fX, const float fY ) : 
	x( fX ),
	y( fY )
{ }



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : コンストラクタ
//
// @param [in] / const Vector2DF& vec2 : 2次元ベクトルクラスのインスタンス
//
// @note : 
//
//----------------------------------------------------------------------------------------------------------------------------------
inline Vector2DF::Vector2DF( const Vector2DF& vec2 ) : 
	x( vec2.x ),
	y( vec2.y )
{ }



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : ベクトルの正規化
//
// @note : 
//
// ベクトルを正規化する。
//----------------------------------------------------------------------------------------------------------------------------------
inline void Vector2DF::Normalize() 
{
	float fLength = Length();

	if ( 0.0f < fLength ) 
	{
		*this /= fLength;
	}
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 零ベクトルに初期化
//
// @note : 
//
// ベクトルを零ベクトルとして初期化する。
//----------------------------------------------------------------------------------------------------------------------------------
inline void Vector2DF::ZeroClear() 
{
	x = y = 0.0f;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : ベクトルの大きさ
//
// @return / float : ベクトルの大きさ
//
// @note : 
//
// ベクトルの大きさを取得する。
//----------------------------------------------------------------------------------------------------------------------------------
inline float Vector2DF::Length() const 
{
	return std::sqrt( ( x * x ) + ( y * y ) );
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 2点の2次元座標間の距離
//
// @param [in] / const Vector2DF& vec2 : 2次元座標
//
// @return / float : 自身の座標と引数の座標の距離
//
// @note : 
//
// 2点の2次元座標間の距離を返す。
//----------------------------------------------------------------------------------------------------------------------------------
inline float Vector2DF::Distance( const Vector2DF& vec2 ) const 
{
	return Distance( *this, vec2 );
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 2点の2次元座標間の距離( クラス関数 )
//
// @param [in] / const Vector2DF& vec2A : 2次元座標1
// @param [in] / const Vector2DF& vec2B : 2次元座標2
//
// @return / float : 2点の2次元座標間の距離
//
// @note : 
//
// 2点の2次元座標間の距離を返す。
//----------------------------------------------------------------------------------------------------------------------------------
inline float Vector2DF::Distance( const Vector2DF& vec2A, const Vector2DF& vec2B ) 
{
	return ( vec2A - vec2B ).Length();
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 2つの2次元ベクトルの内積
//
// @param [in] / const Vector2DF& vec2 : 2次元ベクトル
//
// @return / float : 自身のベクトルと引数のベクトルの内積
//
// @note : 
//
// 2つの2次元ベクトルの内積を返す。
//----------------------------------------------------------------------------------------------------------------------------------
inline float Vector2DF::Dot( const Vector2DF& vec2 ) const 
{
	return Dot( *this, vec2 );
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 2つの2次元ベクトルの内積( クラス関数 )
//
// @param [in] / const Vector2DF& vec2A : 2次元ベクトル1
// @param [in] / const Vector2DF& vec2B : 2次元ベクトル2
//
// @return / float : 2つの2次元ベクトルの内積
//
// @note : 
//
// 2つの2次元ベクトルの内積を返す。
//----------------------------------------------------------------------------------------------------------------------------------
inline float Vector2DF::Dot( const Vector2DF& vec2A, const Vector2DF& vec2B ) 
{
	return ( vec2A.x * vec2B.x ) + ( vec2A.y * vec2B.y );
}


/*
//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 2つの2次元ベクトルの成す角度( 度数角 )
//
// @param [in] / const Vector2DF& vec2 : 2次元ベクトル
//
// @return / float : 自身のベクトルと引数のベクトルの成す角度
//
// @note : 
//
// 2つの2次元ベクトルの成す角度を返す。
//----------------------------------------------------------------------------------------------------------------------------------
inline float Vector2DF::angle( const Vector2DF& vec2 ) const 
{
	return angle( *this, vec2 );
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 2つの2次元ベクトルの成す角度( 度数角 )( クラス関数 )
//
// @param [in] / const Vector2DF& vec2A : 2次元ベクトル1
// @param [in] / const Vector2DF& vec2B : 2次元ベクトル2
//
// @return / float : 2つの2次元ベクトルの成す角度
//
// @note : 
//
// 2つの2次元ベクトルの成す角度を返す。
//----------------------------------------------------------------------------------------------------------------------------------
inline float Vector2DF::angle( const Vector2DF& vec2A, const Vector2DF& vec2B ) 
{
	return  std::acos( ( vec2A.dot( vec2B ) ) / ( vec2A.length * vec2B.length ) );
}
*/


//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 加算演算子オーバーロード
//
// @return / Vector2DF : 自身のベクトル
//
// @note : 
//
// 自身のベクトルを返す。
//----------------------------------------------------------------------------------------------------------------------------------
inline Vector2DF Vector2DF::operator + () const
{
	return *this;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 加算演算子オーバーロード
//
// @param [in] / const Vector2DF& vec2 : 2次元ベクトルクラスのインスタンス
//
// @return / Vector2DF : ベクトルの各成分を加算したベクトル
//
// @note : 
//
// 2次元ベクトルクラス同士の加算演算を定義する。
// ベクトルの各成分を加算したベクトルを返す。
//----------------------------------------------------------------------------------------------------------------------------------
inline Vector2DF Vector2DF::operator + ( const Vector2DF& vec2 ) const
{
	Vector2DF vec2Ret;

	vec2Ret.x = x + vec2.x;
	vec2Ret.y = y + vec2.y;



	return vec2Ret;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 減算演算子オーバーロード
//
// @return / Vector2DF : ベクトルの各成分の符号を反転したベクトル
//
// @note : 
//
// ベクトルの各成分の符号を反転したベクトルを返す。
//----------------------------------------------------------------------------------------------------------------------------------
inline Vector2DF Vector2DF::operator - () const
{
	return Vector2DF( -x, -y );
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 減算演算子オーバーロード
//
// @param [in] / const Vector2DF& vec2 : 2次元ベクトルクラスのインスタンス
//
// @return / Vector2DF : ベクトルの各成分を減算したベクトル
//
// @note : 
//
// 2次元ベクトルクラス同士の減算演算を定義する。
// ベクトルの各成分を減算したベクトルを返す。
//----------------------------------------------------------------------------------------------------------------------------------
inline Vector2DF Vector2DF::operator - ( const Vector2DF& vec2 ) const
{
	Vector2DF vec2Ret;

	vec2Ret.x = x - vec2.x;
	vec2Ret.y = y - vec2.y;



	return vec2Ret;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 乗算演算子オーバーロード
//
// @param [in] / const float fK : ベクトルに乗算する定数
//
// @return / Vector2DF : ベクトルの各成分を乗算したベクトル
//
// @note : 
//
// 2次元ベクトルクラスと定数の乗算演算を定義する。
// ベクトルの各成分を乗算したベクトルを返す。
//----------------------------------------------------------------------------------------------------------------------------------
inline Vector2DF Vector2DF::operator * ( const float fK ) const
{
	Vector2DF vec2Ret;

	vec2Ret.x = x * fK;
	vec2Ret.y = y * fK;



	return vec2Ret;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 除算演算子オーバーロード
//
// @param [in] / const float fK : ベクトルに除算する定数
//
// @return / Vector2DF : ベクトルの各成分を除算したベクトル
//
// @note : 
//
// 2次元ベクトルクラスと定数の除算演算を定義する。
// ベクトルの各成分を除算したベクトルを返す。
//----------------------------------------------------------------------------------------------------------------------------------
inline Vector2DF Vector2DF::operator / ( const float fK ) const
{
	Vector2DF vec2Ret;

	vec2Ret.x = x / fK;
	vec2Ret.y = y / fK;



	return vec2Ret;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 代入演算子オーバーロード
//
// @param [in] / const Vector2DF& vec2 : 2次元ベクトルクラスのインスタンス
//
// @return / Vector2DF& : ベクトルの各成分を代入した自身のベクトル
//
// @note : 
//
// 2次元ベクトルクラス同士の代入演算を定義する。
// ベクトルの各成分を自身のベクトルの各成分に代入した自身のベクトルを返す。
//----------------------------------------------------------------------------------------------------------------------------------
inline Vector2DF& Vector2DF::operator = ( const Vector2DF& vec2 ) 
{
	x = vec2.x;
	y = vec2.y;



	return *this;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 加算代入演算子オーバーロード
//
// @param [in] / const Vector2DF& vec2 : 2次元ベクトルクラスのインスタンス
//
// @return / Vector2DF& : ベクトルの各成分の加算結果を代入した自身のベクトル
//
// @note : 
//
// 2次元ベクトルクラス同士の加算代入演算を定義する。
// ベクトルの各成分と自身のベクトルの各成分の加算結果を代入した自身のベクトルを返す。
//----------------------------------------------------------------------------------------------------------------------------------
inline Vector2DF& Vector2DF::operator += ( const Vector2DF& vec2 )
{
	x += vec2.x;
	y += vec2.y;



	return *this;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 減算代入演算子オーバーロード
//
// @param [in] / const Vector2DF& vec2 : 2次元ベクトルクラスのインスタンス
//
// @return / Vector2DF& : ベクトルの各成分の減算結果を代入した自身のベクトル
//
// @note : 
//
// 2次元ベクトルクラス同士の減算代入演算を定義する。
// ベクトルの各成分と自身のベクトルの各成分の減算結果を代入した自身のベクトルを返す。
//----------------------------------------------------------------------------------------------------------------------------------
inline Vector2DF& Vector2DF::operator -= ( const Vector2DF& vec2 )
{
	x -= vec2.x;
	y -= vec2.y;



	return *this;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 乗算代入演算子オーバーロード
//
// @param [in] / const float fK : ベクトルに乗算する定数
//
// @return / Vector2DF& : ベクトルの各成分の乗算結果を代入した自身のベクトル
//
// @note : 
//
// 2次元ベクトルクラス同士の乗算代入演算を定義する。
// 自身のベクトルの各成分と定数の乗算結果を代入した自身のベクトルを返す。
//----------------------------------------------------------------------------------------------------------------------------------
inline Vector2DF& Vector2DF::operator *= ( const float fK ) 
{
	x *= fK;
	y *= fK;



	return *this;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 除算代入演算子オーバーロード
//
// @param [in] / const float fK : ベクトルに除算する定数
//
// @return / Vector2DF& : ベクトルの各成分の除算結果を代入した自身のベクトル
//
// @note : 
//
// 2次元ベクトルクラス同士の除算代入演算を定義する。
// 自身のベクトルの各成分と定数の除算結果を代入した自身のベクトルを返す。
//----------------------------------------------------------------------------------------------------------------------------------
inline Vector2DF& Vector2DF::operator /= ( const float fK ) 
{
	x /= fK;
	y /= fK;



	return *this;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 等価演算子オーバーロード
//
// @param [in] / const Vector2DF& vec2 : 2次元ベクトルクラスのインスタンス
//
// @return / bool : 等しいベクトルか?( true : 等しい | false : 異なる )
//
// @note : 
//
// 2次元ベクトルクラス同士が等しいベクトルか比較する。
// 全ての成分が一致すれば等しいベクトルと見なす。
//----------------------------------------------------------------------------------------------------------------------------------
inline bool Vector2DF::operator == ( const Vector2DF& vec2 ) 
{
	return ( x == vec2.x && y == vec2.y );
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 不等価演算子オーバーロード
//
// @param [in] / const Vector2DF& vec2 : 2次元ベクトルクラスのインスタンス
//
// @return / bool : 異なるベクトルか?( true : 異なる | false : 等しい )
//
// @note : 
//
// 2次元ベクトルクラス同士が異なるベクトルか比較する。
// 各成分の内、1つでも異なれば異なるベクトルと見なす。
//----------------------------------------------------------------------------------------------------------------------------------
inline bool Vector2DF::operator != ( const Vector2DF& vec2 ) 
{
	return !( *this == vec2 );
}



#endif	// #ifndef _INCLUDE_GUARD_VECTOR2DF_H_