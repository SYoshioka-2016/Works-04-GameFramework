#ifndef _INCLUDE_GUARD_VECTOR3DF_H_
#define _INCLUDE_GUARD_VECTOR3DF_H_



//==================================================================================================================================
// マクロ定義
//==================================================================================================================================

// 右方向ベクトル
#define VECTOR3DF_RIGHT			Vector3DF(  1,  0,  0 )

// 左方向ベクトル
#define VECTOR3DF_LEFT			Vector3DF( -1,  0,  0 )

// 上方向ベクトル
#define VECTOR3DF_UP			Vector3DF(  0,  1,  0 )

// 下方向ベクトル
#define VECTOR3DF_DOWN			Vector3DF(  0, -1,  0 )

// 前方向ベクトル
#define VECTOR3DF_FORWARD		Vector3DF(  0,  0,  1 )

// 後方向ベクトル
#define VECTOR3DF_BACK			Vector3DF(  0,  0, -1 )

// 1で初期化されたベクトル
#define VECTOR3DF_ONE			Vector3DF(  1,  1,  1 )

// 零ベクトル
#define VECTOR3DF_ZERO			Vector3DF(  0,  0,  0 )



//==================================================================================================================================
// インクルード
//==================================================================================================================================

#ifndef _INCLUDE_GUARD_CMATH_
#define _INCLUDE_GUARD_CMATH_
#include <cmath>
#endif	// #ifndef _INCLUDE_GUARD_CMATH_

#ifndef _INCLUDE_GUARD_MYMATH_H_
#include "../../Math/MyMath.h"
#endif	// #ifndef _INCLUDE_GUARD_MYMATH_H_



//==================================================================================================================================
// クラス定義
//==================================================================================================================================

//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 3次元ベクトルクラス
//
// @note : 
//
// 3次元ベクトルを表現したクラス。
// 3つの浮動小数値を管理し、3次元座標や3次元ベクトルとして扱えるようにする。
//----------------------------------------------------------------------------------------------------------------------------------
class Vector3DF 
{
public:

	// コンストラクタ
	Vector3DF();
	
	// コンストラクタ( ベクトル成分の引数 )
	Vector3DF( const float fX, const float fY, const float fZ );
	
//	Vector3DF( const Vector2& vec2 );
	
	// コンストラクタ( コピーコンストラクタ )
	Vector3DF( const Vector3DF& vec3 );



	// ベクトルの正規化
	void Normalize();

	// 正規化したベクトル
	Vector3DF Normalized() const;

	// 零ベクトルに初期化
	void ZeroClear();

	// ベクトルの大きさ
	float Length() const;

	// 2点の3次元座標間の距離
	float Distance( const Vector3DF& vec3 ) const;

	// 2点の3次元座標間の距離( クラス関数 )
	static float Distance( const Vector3DF& vec3A, const Vector3DF& vec3B );

	// 2つの3次元ベクトルの内積
	float Dot( const Vector3DF& vec3 ) const;

	// 2つの3次元ベクトルの内積( クラス関数 )
	static float Dot( const Vector3DF& vec3A, const Vector3DF& vec3B );

	// 2つの3次元ベクトルの外積
	Vector3DF Cross( const Vector3DF& vec3 ) const;

	// 2つの3次元ベクトルの外積( クラス関数 )
	static Vector3DF Cross( const Vector3DF& vec3A, const Vector3DF& vec3B );

	// 2つの3次元ベクトルの成す角度( 度数角 )
	float Angle( const Vector3DF& vec3 ) const;

	// 2つの3次元ベクトルの成す角度( 度数角 )( クラス関数 )
	static float Angle( const Vector3DF& vec3A, const Vector3DF& vec3B );


	
	// 加算演算子オーバーロード
	Vector3DF operator + () const;
	
	// 加算演算子オーバーロード
	Vector3DF operator + ( const Vector3DF& vec3 ) const;
	
	// 減算演算子オーバーロード
	Vector3DF operator - () const;
	
	// 減算演算子オーバーロード
	Vector3DF operator - ( const Vector3DF& vec3 ) const;
	
	// 乗算演算子オーバーロード
	Vector3DF operator * ( const float fK ) const;
	
	// 除算演算子オーバーロード
	Vector3DF operator / ( const float fK ) const;

	// 代入演算子オーバーロード
	Vector3DF& operator = ( const Vector3DF& vec3 );

	// 加算代入演算子オーバーロード
	Vector3DF& operator += ( const Vector3DF& vec3 );
	
	// 減算代入演算子オーバーロード
	Vector3DF& operator -= ( const Vector3DF& vec3 );
	
	// 乗算代入演算子オーバーロード
	Vector3DF& operator *= ( const float fK );
	
	// 除算代入演算子オーバーロード
	Vector3DF& operator /= ( const float fK );

	// 等価演算子オーバーロード
	bool operator == ( const Vector3DF& vec3 );

	// 不等価演算子オーバーロード
	bool operator != ( const Vector3DF& vec3 );

public:

	// メンバ変数

	// ベクトルのx成分
	float x;

	// ベクトルのy成分
	float y;

	// ベクトルのz成分
	float z;
};



//==================================================================================================================================
// 関数定義
//==================================================================================================================================

//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : コンストラクタ
//
// @note : 
//
//----------------------------------------------------------------------------------------------------------------------------------
inline Vector3DF::Vector3DF() : 
	x( 0 ),
	y( 0 ),
	z( 0 )
{ }



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : コンストラクタ
//
// @param [in] / const float fX : ベクトルのx成分
// @param [in] / const float fY : ベクトルのy成分
// @param [in] / const float fZ : ベクトルのz成分
//
// @note : 
//
//----------------------------------------------------------------------------------------------------------------------------------
inline Vector3DF::Vector3DF( const float fX, const float fY, const float fZ ) : 
	x( fX ),
	y( fY ),
	z( fZ )
{ }



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : コンストラクタ
//
// @param [in] / const Vector3DF& vec3 : 3次元ベクトルクラスのインスタンス
//
// @note : 
//
//----------------------------------------------------------------------------------------------------------------------------------
inline Vector3DF::Vector3DF( const Vector3DF& vec3 ) : 
	x( vec3.x ),
	y( vec3.y ),
	z( vec3.z )
{ }



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : ベクトルの正規化
//
// @note : 
//
// ベクトルを正規化する。
//----------------------------------------------------------------------------------------------------------------------------------
inline void Vector3DF::Normalize() 
{
	float fLength = Length();

	if ( 0.0f < fLength ) 
	{
		*this /= fLength;
	}



	if ( x!= 0 && y == 0 && z == 0 ) 
	{
		x = (float)GetSign( x );
	}

	if ( y!= 0 && z == 0 && x == 0 ) 
	{
		y = (float)GetSign( y );
	}

	if ( z!= 0 &&  x == 0 && y == 0 ) 
	{
		z = (float)GetSign( z );
	}
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 正規化したベクトル
//
// @return / Vector3DF : 正規化したベクトル
//
// @note : 
//
// 自身のコピーを正規化したベクトルを返す。
// 自身は正規化しない。
//----------------------------------------------------------------------------------------------------------------------------------
inline Vector3DF Vector3DF::Normalized() const
{
	Vector3DF vec3Ret = *this;

	vec3Ret.Normalize();



	return vec3Ret;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 零ベクトルに初期化
//
// @note : 
//
// ベクトルを零ベクトルとして初期化する。
//----------------------------------------------------------------------------------------------------------------------------------
inline void Vector3DF::ZeroClear() 
{
	x = y = z = 0.0f;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : ベクトルの大きさ
//
// @return / float : ベクトルの大きさ
//
// @note : 
//
// ベクトルの大きさを取得する。
//----------------------------------------------------------------------------------------------------------------------------------
inline float Vector3DF::Length() const 
{
	return std::sqrt( ( x * x ) + ( y * y ) + ( z * z ) );
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 2点の3次元座標間の距離
//
// @param [in] / const Vector3DF& vec3 : 3次元座標
//
// @return / float : 自身の座標と引数の座標の距離
//
// @note : 
//
// 2点の3次元座標間の距離を返す。
//----------------------------------------------------------------------------------------------------------------------------------
inline float Vector3DF::Distance( const Vector3DF& vec3 ) const 
{
	return Distance( *this, vec3 );
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 2点の3次元座標間の距離( クラス関数 )
//
// @param [in] / const Vector3DF& vec3A : 3次元座標1
// @param [in] / const Vector3DF& vec3B : 3次元座標2
//
// @return / float : 2点の3次元座標間の距離
//
// @note : 
//
// 2点の3次元座標間の距離を返す。
//----------------------------------------------------------------------------------------------------------------------------------
inline float Vector3DF::Distance( const Vector3DF& vec3A, const Vector3DF& vec3B ) 
{
	return ( vec3A - vec3B ).Length();
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 2つの3次元ベクトルの内積
//
// @param [in] / const Vector3DF& vec3 : 3次元ベクトル
//
// @return / float : 自身のベクトルと引数のベクトルの内積
//
// @note : 
//
// 2つの3次元ベクトルの内積を返す。
//----------------------------------------------------------------------------------------------------------------------------------
inline float Vector3DF::Dot( const Vector3DF& vec3 ) const 
{
	return Dot( *this, vec3 );
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 2つの3次元ベクトルの内積( クラス関数 )
//
// @param [in] / const Vector3DF& vec3A : 3次元ベクトル1
// @param [in] / const Vector3DF& vec3B : 3次元ベクトル2
//
// @return / float : 2つの3次元ベクトルの内積
//
// @note : 
//
// 2つの3次元ベクトルの内積を返す。
//----------------------------------------------------------------------------------------------------------------------------------
inline float Vector3DF::Dot( const Vector3DF& vec3A, const Vector3DF& vec3B ) 
{
	return ( vec3A.x * vec3B.x ) + ( vec3A.y * vec3B.y ) + ( vec3A.z * vec3B.z );
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 2つの3次元ベクトルの外積
//
// @param [in] / const Vector3DF& vec3 : 3次元ベクトル
//
// @return / float : 自身のベクトルと引数のベクトルの外積
//
// @note : 
//
// 2つの3次元ベクトルの外積を返す。
//----------------------------------------------------------------------------------------------------------------------------------
inline Vector3DF Vector3DF::Cross( const Vector3DF& vec3 ) const 
{
	return Cross( *this, vec3 );
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 2つの3次元ベクトルの外積( クラス関数 )
//
// @param [in] / const Vector3DF& vec3A : 3次元ベクトル1
// @param [in] / const Vector3DF& vec3B : 3次元ベクトル2
//
// @return / float : 2つの3次元ベクトル外積
//
// @note : 
//
// 2つの3次元ベクトルの外積を返す。
//----------------------------------------------------------------------------------------------------------------------------------
inline Vector3DF Vector3DF::Cross( const Vector3DF& vec3A, const Vector3DF& vec3B ) 
{
	return 
		Vector3DF(
			vec3A.y * vec3B.z - vec3A.z * vec3B.y,
			vec3A.z * vec3B.x - vec3A.x * vec3B.z,
			vec3A.x * vec3B.y - vec3A.y * vec3B.x
		);
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 2つの3次元ベクトルの成す角度( 度数角 )
//
// @param [in] / const Vector3DF& vec3 : 3次元ベクトル
//
// @return / float : 自身のベクトルと引数のベクトルの成す角度
//
// @note : 
//
// 2つの3次元ベクトルの成す角度を返す。
//----------------------------------------------------------------------------------------------------------------------------------
inline float Vector3DF::Angle( const Vector3DF& vec3 ) const 
{
	return Angle( *this, vec3 );
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 2つの3次元ベクトルの成す角度( 度数角 )( クラス関数 )
//
// @param [in] / const Vector3DF& vec3A : 3次元ベクトル1
// @param [in] / const Vector3DF& vec3B : 3次元ベクトル2
//
// @return / float : 2つの3次元ベクトルの成す角度
//
// @note : 
//
// 2つの3次元ベクトルの成す角度を返す。
//----------------------------------------------------------------------------------------------------------------------------------
inline float Vector3DF::Angle( const Vector3DF& vec3A, const Vector3DF& vec3B ) 
{
	// ベクトルの大きさが0なら処理しない
	if ( 0 >= vec3A.Length() ) { return 0; }
	
	// ベクトルの大きさが0なら処理しない
	if ( 0 >= vec3B.Length() ) { return 0; }



	return (float)RadianToDegree( std::acos( (float)Clamp( Dot( vec3A, vec3B ), -1.0f, 1.0f ) ) );
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 加算演算子オーバーロード
//
// @return / Vector3DF : 自身のベクトル
//
// @note : 
//
// 自身のベクトルを返す。
//----------------------------------------------------------------------------------------------------------------------------------
inline Vector3DF Vector3DF::operator + () const
{
	return *this;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 加算演算子オーバーロード
//
// @param [in] / const Vector3DF& vec3 : 3次元ベクトルクラスのインスタンス
//
// @return / Vector3DF : ベクトルの各成分を加算したベクトル
//
// @note : 
//
// 3次元ベクトルクラス同士の加算演算を定義する。
// ベクトルの各成分を加算したベクトルを返す。
//----------------------------------------------------------------------------------------------------------------------------------
inline Vector3DF Vector3DF::operator + ( const Vector3DF& vec3 ) const
{
	Vector3DF vec3Ret;

	vec3Ret.x = x + vec3.x;
	vec3Ret.y = y + vec3.y;
	vec3Ret.z = z + vec3.z;



	return vec3Ret;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 減算演算子オーバーロード
//
// @return / Vector3DF : ベクトルの各成分の符号を反転したベクトル
//
// @note : 
//
// ベクトルの各成分の符号を反転したベクトルを返す。
//----------------------------------------------------------------------------------------------------------------------------------
inline Vector3DF Vector3DF::operator - () const
{
	return Vector3DF( -x, -y, -z );
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 減算演算子オーバーロード
//
// @param [in] / const Vector3DF& vec3 : 3次元ベクトルクラスのインスタンス
//
// @return / Vector3DF : ベクトルの各成分を減算したベクトル
//
// @note : 
//
// 3次元ベクトルクラス同士の減算演算を定義する。
// ベクトルの各成分を減算したベクトルを返す。
//----------------------------------------------------------------------------------------------------------------------------------
inline Vector3DF Vector3DF::operator - ( const Vector3DF& vec3 ) const
{
	Vector3DF vec3Ret;

	vec3Ret.x = x - vec3.x;
	vec3Ret.y = y - vec3.y;
	vec3Ret.z = z - vec3.z;



	return vec3Ret;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 乗算演算子オーバーロード
//
// @param [in] / const float fK : ベクトルに乗算する定数
//
// @return / Vector3DF : ベクトルの各成分を乗算したベクトル
//
// @note : 
//
// 3次元ベクトルクラスと定数の乗算演算を定義する。
// ベクトルの各成分を乗算したベクトルを返す。
//----------------------------------------------------------------------------------------------------------------------------------
inline Vector3DF Vector3DF::operator * ( const float fK ) const
{
	Vector3DF vec3Ret;

	vec3Ret.x = x * fK;
	vec3Ret.y = y * fK;
	vec3Ret.z = z * fK;



	return vec3Ret;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 除算演算子オーバーロード
//
// @param [in] / const float fK : ベクトルに除算する定数
//
// @return / Vector3DF : ベクトルの各成分を除算したベクトル
//
// @note : 
//
// 3次元ベクトルクラスと定数の除算演算を定義する。
// ベクトルの各成分を除算したベクトルを返す。
//----------------------------------------------------------------------------------------------------------------------------------
inline Vector3DF Vector3DF::operator / ( const float fK ) const
{
	Vector3DF vec3Ret;

	vec3Ret.x = x / fK;
	vec3Ret.y = y / fK;
	vec3Ret.z = z / fK;



	return vec3Ret;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 代入演算子オーバーロード
//
// @param [in] / const Vector3DF& vec3 : 3次元ベクトルクラスのインスタンス
//
// @return / Vector3DF& : ベクトルの各成分を代入した自身のベクトル
//
// @note : 
//
// 3次元ベクトルクラス同士の代入演算を定義する。
// ベクトルの各成分を自身のベクトルの各成分に代入した自身のベクトルを返す。
//----------------------------------------------------------------------------------------------------------------------------------
inline Vector3DF& Vector3DF::operator = ( const Vector3DF& vec3 ) 
{
	x = vec3.x;
	y = vec3.y;
	z = vec3.z;



	return *this;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 加算代入演算子オーバーロード
//
// @param [in] / const Vector3DF& vec3 : 3次元ベクトルクラスのインスタンス
//
// @return / Vector3DF& : ベクトルの各成分の加算結果を代入した自身のベクトル
//
// @note : 
//
// 3次元ベクトルクラス同士の加算代入演算を定義する。
// ベクトルの各成分と自身のベクトルの各成分の加算結果を代入した自身のベクトルを返す。
//----------------------------------------------------------------------------------------------------------------------------------
inline Vector3DF& Vector3DF::operator += ( const Vector3DF& vec3 )
{
	x += vec3.x;
	y += vec3.y;
	z += vec3.z;



	return *this;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 減算代入演算子オーバーロード
//
// @param [in] / const Vector3DF& vec3 : 3次元ベクトルクラスのインスタンス
//
// @return / Vector3DF& : ベクトルの各成分の減算結果を代入した自身のベクトル
//
// @note : 
//
// 3次元ベクトルクラス同士の減算代入演算を定義する。
// ベクトルの各成分と自身のベクトルの各成分の減算結果を代入した自身のベクトルを返す。
//----------------------------------------------------------------------------------------------------------------------------------
inline Vector3DF& Vector3DF::operator -= ( const Vector3DF& vec3 )
{
	x -= vec3.x;
	y -= vec3.y;
	z -= vec3.z;



	return *this;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 乗算代入演算子オーバーロード
//
// @param [in] / const float fK : ベクトルに乗算する定数
//
// @return / Vector3DF& : ベクトルの各成分の乗算結果を代入した自身のベクトル
//
// @note : 
//
// 3次元ベクトルクラス同士の乗算代入演算を定義する。
// 自身のベクトルの各成分と定数の乗算結果を代入した自身のベクトルを返す。
//----------------------------------------------------------------------------------------------------------------------------------
inline Vector3DF& Vector3DF::operator *= ( const float fK ) 
{
	x *= fK;
	y *= fK;
	z *= fK;



	return *this;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 除算代入演算子オーバーロード
//
// @param [in] / const float fK : ベクトルに除算する定数
//
// @return / Vector3DF& : ベクトルの各成分の除算結果を代入した自身のベクトル
//
// @note : 
//
// 3次元ベクトルクラス同士の除算代入演算を定義する。
// 自身のベクトルの各成分と定数の除算結果を代入した自身のベクトルを返す。
//----------------------------------------------------------------------------------------------------------------------------------
inline Vector3DF& Vector3DF::operator /= ( const float fK ) 
{
	x /= fK;
	y /= fK;
	z /= fK;



	return *this;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 等価演算子オーバーロード
//
// @param [in] / const Vector3DF& vec3 : 3次元ベクトルクラスのインスタンス
//
// @return / bool : 等しいベクトルか?( true : 等しい | false : 異なる )
//
// @note : 
//
// 3次元ベクトルクラス同士が等しいベクトルか比較する。
// 全ての成分が一致すれば等しいベクトルと見なす。
//----------------------------------------------------------------------------------------------------------------------------------
inline bool Vector3DF::operator == ( const Vector3DF& vec3 ) 
{
	return ( x == vec3.x && y == vec3.y && z == vec3.z );
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 不等価演算子オーバーロード
//
// @param [in] / const Vector3DF& vec3 : 3次元ベクトルクラスのインスタンス
//
// @return / bool : 異なるベクトルか?( true : 異なる | false : 等しい )
//
// @note : 
//
// 3次元ベクトルクラス同士が異なるベクトルか比較する。
// 各成分の内、1つでも異なれば異なるベクトルと見なす。
//----------------------------------------------------------------------------------------------------------------------------------
inline bool Vector3DF::operator != ( const Vector3DF& vec3 ) 
{
	return !( *this == vec3 );
}



#endif	// #ifndef _INCLUDE_GUARD_VECTOR3DF_H_