#ifndef _INCLUDE_GUARD_VECTOR3DI_H_
#define _INCLUDE_GUARD_VECTOR3DI_H_



//==================================================================================================================================
// マクロ定義
//==================================================================================================================================

// 1で初期化されたベクトル
#define Vector3DI_ONE			Vector3DI( 1, 1, 1 )

// 零ベクトル
#define Vector3DI_ZERO			Vector3DI( 0, 0, 0 )



//==================================================================================================================================
// インクルード
//==================================================================================================================================

#ifndef _INCLUDE_GUARD_CMATH_
#define _INCLUDE_GUARD_CMATH_
#include <cmath>
#endif	// #ifndef _INCLUDE_GUARD_CMATH_



//==================================================================================================================================
// クラス定義
//==================================================================================================================================

//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 3次元ベクトルクラス( int型 )
//
// @note : 
//
// 3次元ベクトルを表現したクラス。
// 3つのint型整数値を管理する。
//----------------------------------------------------------------------------------------------------------------------------------
class Vector3DI 
{
public:

	// コンストラクタ
	Vector3DI();
	
	// コンストラクタ( ベクトル成分の引数 )
	Vector3DI( const int iX, const int iY, const int iZ );
	
	// コンストラクタ( コピーコンストラクタ )
	Vector3DI( const Vector3DI& ivec3 );



	// ベクトルの正規化
//	void Normalize();

	// 零ベクトルに初期化
	void ZeroClear();

	// ベクトルの大きさ
	float Length() const;

	// 2点の3次元座標間の距離
	float Distance( const Vector3DI& ivec3 ) const;

	// 2点の3次元座標間の距離( クラス関数 )
	static float Distance( const Vector3DI& ivec3A, const Vector3DI& ivec3B );

	// 2つの3次元ベクトルの内積
	float Dot( const Vector3DI& ivec3 ) const;

	// 2つの3次元ベクトルの内積( クラス関数 )
	static float Dot( const Vector3DI& ivec3A, const Vector3DI& ivec3B );
/*
	// 2つの3次元ベクトルの成す角度( 度数角 )
	float angle( const Vector3DI& ivec3 ) const;

	// 2つの3次元ベクトルの成す角度( 度数角 )( クラス関数 )
	static float angle( const Vector3DI& ivec3A, const Vector3DI& ivec3B );
*/

	
	// 加算演算子オーバーロード
	Vector3DI operator + () const;
	
	// 加算演算子オーバーロード
	Vector3DI operator + ( const Vector3DI& ivec3 ) const;
	
	// 減算演算子オーバーロード
	Vector3DI operator - () const;
	
	// 減算演算子オーバーロード
	Vector3DI operator - ( const Vector3DI& ivec3 ) const;
	
	// 乗算演算子オーバーロード
	Vector3DI operator * ( const int iK ) const;
	
	// 除算演算子オーバーロード
	Vector3DI operator / ( const int iK ) const;

	// 代入演算子オーバーロード
	Vector3DI& operator = ( const Vector3DI& ivec3 );

	// 加算代入演算子オーバーロード
	Vector3DI& operator += ( const Vector3DI& ivec3 );
	
	// 減算代入演算子オーバーロード
	Vector3DI& operator -= ( const Vector3DI& ivec3 );
	
	// 乗算代入演算子オーバーロード
	Vector3DI& operator *= ( const int iK );
	
	// 除算代入演算子オーバーロード
	Vector3DI& operator /= ( const int iK );

	// 等価演算子オーバーロード
	bool operator == ( const Vector3DI& ivec3 );

	// 不等価演算子オーバーロード
	bool operator != ( const Vector3DI& ivec3 );

public:

	// メンバ変数

	// ベクトルのx成分
	int x;

	// ベクトルのy成分
	int y;

	// ベクトルのz成分
	int z;
};



//==================================================================================================================================
// 関数定義
//==================================================================================================================================

//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : コンストラクタ
//
// @note : 
//
//----------------------------------------------------------------------------------------------------------------------------------
inline Vector3DI::Vector3DI() : 
	x( 0 ),
	y( 0 ),
	z( 0 )
{ }



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : コンストラクタ
//
// @param [in] / const int iX : ベクトルのx成分
// @param [in] / const int iY : ベクトルのy成分
// @param [in] / const int iZ : ベクトルのz成分
//
// @note : 
//
//----------------------------------------------------------------------------------------------------------------------------------
inline Vector3DI::Vector3DI( const int iX, const int iY, const int iZ ) : 
	x( iX ),
	y( iY ),
	z( iZ )
{ }



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : コンストラクタ
//
// @param [in] / const Vector3DI& ivec3 : 3次元ベクトルクラスのインスタンス
//
// @note : 
//
//----------------------------------------------------------------------------------------------------------------------------------
inline Vector3DI::Vector3DI( const Vector3DI& ivec3 ) : 
	x( ivec3.x ),
	y( ivec3.y ),
	z( ivec3.z )
{ }


/*
//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : ベクトルの正規化
//
// @note : 
//
// ベクトルを正規化する。
//----------------------------------------------------------------------------------------------------------------------------------
inline void Vector3DI::Normalize() 
{
	float fLength = Length();

	if ( 0.0f < fLength ) 
	{
		*this /= fLength;
	}
}
*/


//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 零ベクトルに初期化
//
// @note : 
//
// ベクトルを零ベクトルとして初期化する。
//----------------------------------------------------------------------------------------------------------------------------------
inline void Vector3DI::ZeroClear() 
{
	x = y = z = 0;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : ベクトルの大きさ
//
// @return / float : ベクトルの大きさ
//
// @note : 
//
// ベクトルの大きさを取得する。
//----------------------------------------------------------------------------------------------------------------------------------
inline float Vector3DI::Length() const 
{
	return (float)std::sqrt( ( x * x ) + ( y * y ) + ( z * z ) );
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 2点の3次元座標間の距離
//
// @param [in] / const Vector3DI& ivec3 : 3次元座標
//
// @return / float : 自身の座標と引数の座標の距離
//
// @note : 
//
// 2点の3次元座標間の距離を返す。
//----------------------------------------------------------------------------------------------------------------------------------
inline float Vector3DI::Distance( const Vector3DI& ivec3 ) const 
{
	return Distance( *this, ivec3 );
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 2点の3次元座標間の距離( クラス関数 )
//
// @param [in] / const Vector3DI& ivec3A : 3次元座標1
// @param [in] / const Vector3DI& ivec3B : 3次元座標2
//
// @return / float : 2点の3次元座標間の距離
//
// @note : 
//
// 2点の3次元座標間の距離を返す。
//----------------------------------------------------------------------------------------------------------------------------------
inline float Vector3DI::Distance( const Vector3DI& ivec3A, const Vector3DI& ivec3B ) 
{
	return ( ivec3A - ivec3B ).Length();
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 2つの3次元ベクトルの内積
//
// @param [in] / const Vector3DI& ivec3 : 3次元ベクトル
//
// @return / float : 自身のベクトルと引数のベクトルの内積
//
// @note : 
//
// 2つの3次元ベクトルの内積を返す。
//----------------------------------------------------------------------------------------------------------------------------------
inline float Vector3DI::Dot( const Vector3DI& ivec3 ) const 
{
	return Dot( *this, ivec3 );
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 2つの3次元ベクトルの内積( クラス関数 )
//
// @param [in] / const Vector3DI& ivec3A : 3次元ベクトル1
// @param [in] / const Vector3DI& ivec3B : 3次元ベクトル2
//
// @return / float : 2つの3次元ベクトルの内積
//
// @note : 
//
// 2つの3次元ベクトルの内積を返す。
//----------------------------------------------------------------------------------------------------------------------------------
inline float Vector3DI::Dot( const Vector3DI& ivec3A, const Vector3DI& ivec3B ) 
{
	return (float)( ( ivec3A.x * ivec3B.x ) + ( ivec3A.y * ivec3B.y ) + ( ivec3A.z * ivec3B.z ) );
}


/*
//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 2つの3次元ベクトルの成す角度( 度数角 )
//
// @param [in] / const Vector3DI& ivec3 : 3次元ベクトル
//
// @return / float : 自身のベクトルと引数のベクトルの成す角度
//
// @note : 
//
// 2つの3次元ベクトルの成す角度を返す。
//----------------------------------------------------------------------------------------------------------------------------------
inline float Vector3DI::angle( const Vector3DI& ivec3 ) const 
{
	return angle( *this, ivec3 );
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 2つの3次元ベクトルの成す角度( 度数角 )( クラス関数 )
//
// @param [in] / const Vector3DI& ivec3A : 3次元ベクトル1
// @param [in] / const Vector3DI& ivec3B : 3次元ベクトル2
//
// @return / float : 2つの3次元ベクトルの成す角度
//
// @note : 
//
// 2つの3次元ベクトルの成す角度を返す。
//----------------------------------------------------------------------------------------------------------------------------------
inline float Vector3DI::angle( const Vector3DI& ivec3A, const Vector3DI& ivec3B ) 
{
	return  std::acos( ( ivec3A.dot( ivec3B ) ) / ( ivec3A.length * ivec3B.length ) );
}
*/


//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 加算演算子オーバーロード
//
// @return / Vector3DI : 自身のベクトル
//
// @note : 
//
// 自身のベクトルを返す。
//----------------------------------------------------------------------------------------------------------------------------------
inline Vector3DI Vector3DI::operator + () const
{
	return *this;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 加算演算子オーバーロード
//
// @param [in] / const Vector3DI& ivec3 : 3次元ベクトルクラスのインスタンス
//
// @return / Vector3DI : ベクトルの各成分を加算したベクトル
//
// @note : 
//
// 3次元ベクトルクラス同士の加算演算を定義する。
// ベクトルの各成分を加算したベクトルを返す。
//----------------------------------------------------------------------------------------------------------------------------------
inline Vector3DI Vector3DI::operator + ( const Vector3DI& ivec3 ) const
{
	Vector3DI ivec3Ret;

	ivec3Ret.x = x + ivec3.x;
	ivec3Ret.y = y + ivec3.y;
	ivec3Ret.z = z + ivec3.z;



	return ivec3Ret;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 減算演算子オーバーロード
//
// @return / Vector3DI : ベクトルの各成分の符号を反転したベクトル
//
// @note : 
//
// ベクトルの各成分の符号を反転したベクトルを返す。
//----------------------------------------------------------------------------------------------------------------------------------
inline Vector3DI Vector3DI::operator - () const
{
	return Vector3DI( -x, -y, -z );
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 減算演算子オーバーロード
//
// @param [in] / const Vector3DI& ivec3 : 3次元ベクトルクラスのインスタンス
//
// @return / Vector3DI : ベクトルの各成分を減算したベクトル
//
// @note : 
//
// 3次元ベクトルクラス同士の減算演算を定義する。
// ベクトルの各成分を減算したベクトルを返す。
//----------------------------------------------------------------------------------------------------------------------------------
inline Vector3DI Vector3DI::operator - ( const Vector3DI& ivec3 ) const
{
	Vector3DI ivec3Ret;

	ivec3Ret.x = x - ivec3.x;
	ivec3Ret.y = y - ivec3.y;
	ivec3Ret.z = z - ivec3.z;



	return ivec3Ret;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 乗算演算子オーバーロード
//
// @param [in] / const int iK : ベクトルに乗算する定数
//
// @return / Vector3DI : ベクトルの各成分を乗算したベクトル
//
// @note : 
//
// 3次元ベクトルクラスと定数の乗算演算を定義する。
// ベクトルの各成分を乗算したベクトルを返す。
//----------------------------------------------------------------------------------------------------------------------------------
inline Vector3DI Vector3DI::operator * ( const int iK ) const
{
	Vector3DI ivec3Ret;

	ivec3Ret.x = x * iK;
	ivec3Ret.y = y * iK;
	ivec3Ret.z = z * iK;



	return ivec3Ret;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 除算演算子オーバーロード
//
// @param [in] / const int iK : ベクトルに除算する定数
//
// @return / Vector3DI : ベクトルの各成分を除算したベクトル
//
// @note : 
//
// 3次元ベクトルクラスと定数の除算演算を定義する。
// ベクトルの各成分を除算したベクトルを返す。
//----------------------------------------------------------------------------------------------------------------------------------
inline Vector3DI Vector3DI::operator / ( const int iK ) const
{
	Vector3DI ivec3Ret;

	ivec3Ret.x = x / iK;
	ivec3Ret.y = y / iK;
	ivec3Ret.z = z / iK;



	return ivec3Ret;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 代入演算子オーバーロード
//
// @param [in] / const Vector3DI& ivec3 : 3次元ベクトルクラスのインスタンス
//
// @return / Vector3DI& : ベクトルの各成分を代入した自身のベクトル
//
// @note : 
//
// 3次元ベクトルクラス同士の代入演算を定義する。
// ベクトルの各成分を自身のベクトルの各成分に代入した自身のベクトルを返す。
//----------------------------------------------------------------------------------------------------------------------------------
inline Vector3DI& Vector3DI::operator = ( const Vector3DI& ivec3 ) 
{
	x = ivec3.x;
	y = ivec3.y;
	z = ivec3.z;



	return *this;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 加算代入演算子オーバーロード
//
// @param [in] / const Vector3DI& ivec3 : 3次元ベクトルクラスのインスタンス
//
// @return / Vector3DI& : ベクトルの各成分の加算結果を代入した自身のベクトル
//
// @note : 
//
// 3次元ベクトルクラス同士の加算代入演算を定義する。
// ベクトルの各成分と自身のベクトルの各成分の加算結果を代入した自身のベクトルを返す。
//----------------------------------------------------------------------------------------------------------------------------------
inline Vector3DI& Vector3DI::operator += ( const Vector3DI& ivec3 )
{
	x += ivec3.x;
	y += ivec3.y;
	z += ivec3.z;



	return *this;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 減算代入演算子オーバーロード
//
// @param [in] / const Vector3DI& ivec3 : 3次元ベクトルクラスのインスタンス
//
// @return / Vector3DI& : ベクトルの各成分の減算結果を代入した自身のベクトル
//
// @note : 
//
// 3次元ベクトルクラス同士の減算代入演算を定義する。
// ベクトルの各成分と自身のベクトルの各成分の減算結果を代入した自身のベクトルを返す。
//----------------------------------------------------------------------------------------------------------------------------------
inline Vector3DI& Vector3DI::operator -= ( const Vector3DI& ivec3 )
{
	x -= ivec3.x;
	y -= ivec3.y;
	z -= ivec3.z;



	return *this;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 乗算代入演算子オーバーロード
//
// @param [in] / const int iK : ベクトルに乗算する定数
//
// @return / Vector3DI& : ベクトルの各成分の乗算結果を代入した自身のベクトル
//
// @note : 
//
// 3次元ベクトルクラス同士の乗算代入演算を定義する。
// 自身のベクトルの各成分と定数の乗算結果を代入した自身のベクトルを返す。
//----------------------------------------------------------------------------------------------------------------------------------
inline Vector3DI& Vector3DI::operator *= ( const int iK ) 
{
	x *= iK;
	y *= iK;
	z *= iK;



	return *this;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 除算代入演算子オーバーロード
//
// @param [in] / const int iK : ベクトルに除算する定数
//
// @return / Vector3DI& : ベクトルの各成分の除算結果を代入した自身のベクトル
//
// @note : 
//
// 3次元ベクトルクラス同士の除算代入演算を定義する。
// 自身のベクトルの各成分と定数の除算結果を代入した自身のベクトルを返す。
//----------------------------------------------------------------------------------------------------------------------------------
inline Vector3DI& Vector3DI::operator /= ( const int iK ) 
{
	x /= iK;
	y /= iK;
	z /= iK;



	return *this;
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 等価演算子オーバーロード
//
// @param [in] / const Vector3DI& ivec3 : 3次元ベクトルクラスのインスタンス
//
// @return / bool : 等しいベクトルか?( true : 等しい | false : 異なる )
//
// @note : 
//
// 3次元ベクトルクラス同士が等しいベクトルか比較する。
// 全ての成分が一致すれば等しいベクトルと見なす。
//----------------------------------------------------------------------------------------------------------------------------------
inline bool Vector3DI::operator == ( const Vector3DI& ivec3 ) 
{
	return ( x == ivec3.x && y == ivec3.y && z == ivec3.z );
}



//----------------------------------------------------------------------------------------------------------------------------------
// @purpose : 不等価演算子オーバーロード
//
// @param [in] / const Vector3DI& ivec3 : 3次元ベクトルクラスのインスタンス
//
// @return / bool : 異なるベクトルか?( true : 異なる | false : 等しい )
//
// @note : 
//
// 3次元ベクトルクラス同士が異なるベクトルか比較する。
// 各成分の内、1つでも異なれば異なるベクトルと見なす。
//----------------------------------------------------------------------------------------------------------------------------------
inline bool Vector3DI::operator != ( const Vector3DI& ivec3 ) 
{
	return !( *this == ivec3 );
}



#endif	// #ifndef _INCLUDE_GUARD_VECTOR3DI_H_